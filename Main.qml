import QtQuick
import QtQuick.Window
import QtQuick.Controls
import QtQuick.Layouts
import QtQuick.Shapes

ApplicationWindow {
    id: mainWindow
    width: 1400
    height: 900
    minimumWidth: 1200
    minimumHeight: 700
    visible: true
    title: "–ú–æ–Ω–∏—Ç–æ—Ä –ø–æ–ª–æ–∂–µ–Ω–∏—è –≥–æ–ª–æ–≤—ã"
    color: "#1e1e1e"

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    function showNotification(message, isError) {
        if (notificationTimer.running) {
            return
        }
        notificationText.text = message
        notificationBackground.color = isError ? "#f44336" : "#4CAF50"
        notificationLayout.height = 40
        notificationTimer.restart()
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π
    function formatValue(value, hasData) {
        return hasData ? value.toFixed(1) + "¬∞" : "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    }

    function formatSpeed(value, hasData) {
        return hasData ? value.toFixed(1) + "¬∞/—Å" : "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    }

    ColumnLayout {
        anchors.fill: parent
        anchors.margins: 10
        spacing: 10

        // === –í–ï–†–•–ù–Ø–Ø –ü–ê–ù–ï–õ–¨: –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø + –ù–ê–°–¢–†–û–ô–ö–ò –ü–û–†–¢–ê ===
        RowLayout {
            Layout.fillWidth: true
            spacing: 15

            // === –õ–ï–í–ê–Ø –ß–ê–°–¢–¨ - –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø ===
            Rectangle {
                Layout.fillWidth: true
                Layout.preferredHeight: notificationLayout.height
                color: "transparent"
                clip: true

                Rectangle {
                    id: notificationLayout
                    width: parent.width
                    height: 0
                    color: "transparent"
                    clip: true
                    radius: 6

                    Behavior on height {
                        NumberAnimation { duration: 300; easing.type: Easing.OutCubic }
                    }

                    Rectangle {
                        id: notificationBackground
                        anchors.fill: parent
                        color: "#4CAF50"
                        radius: 6

                        RowLayout {
                            anchors.fill: parent
                            anchors.margins: 10
                            spacing: 10

                            Text {
                                id: notificationIcon
                                text: "üí°"
                                font.pixelSize: 16
                                color: "white"
                            }

                            Text {
                                id: notificationText
                                text: ""
                                color: "white"
                                font.pixelSize: 14
                                Layout.fillWidth: true
                                wrapMode: Text.Wrap
                            }

                            Button {
                                text: "‚úï"
                                Layout.preferredWidth: 30
                                Layout.preferredHeight: 30
                                onClicked: {
                                    notificationLayout.height = 0
                                    notificationTimer.stop()
                                }
                                background: Rectangle {
                                    color: "transparent"
                                    border.color: "white"
                                    border.width: 1
                                    radius: 4
                                }
                                contentItem: Text {
                                    text: parent.text
                                    color: "white"
                                    font.pixelSize: 12
                                    horizontalAlignment: Text.AlignHCenter
                                    verticalAlignment: Text.AlignVCenter
                                }
                            }
                        }
                    }

                    Timer {
                        id: notificationTimer
                        interval: 5000
                        onTriggered: {
                            notificationLayout.height = 0
                        }
                    }
                }
            }

            // === –ü–†–ê–í–ê–Ø –ß–ê–°–¢–¨ - –ù–ê–°–¢–†–û–ô–ö–ò –ü–û–†–¢–ê –ò –°–¢–ê–¢–£–° ===
            RowLayout {
                spacing: 15

                // –ë–ª–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ COM-–ø–æ—Ä—Ç–∞
                Rectangle {
                    Layout.preferredWidth: 350
                    Layout.preferredHeight: 80
                    color: "#2d2d2d"
                    radius: 8

                    RowLayout {
                        anchors.fill: parent
                        anchors.margins: 10
                        spacing: 10

                        ColumnLayout {
                            Layout.fillWidth: true
                            spacing: 5

                            Text {
                                text: "COM –ø–æ—Ä—Ç"
                                color: "#aaa"
                                font.pixelSize: 12
                            }

                            ComboBox {
                                id: comPortCombo
                                Layout.fillWidth: true
                                model: controller.availablePorts
                                onActivated: controller.selectedPort = currentText
                                background: Rectangle {
                                    color: "#3c3c3c"
                                    radius: 4
                                }
                            }
                        }

                        Button {
                            text: controller.connected ? "–û—Ç–∫–ª—é—á–∏—Ç—å" : "–ü–æ–¥–∫–ª—é—á–∏—Ç—å"
                            Layout.preferredWidth: 100
                            Layout.alignment: Qt.AlignBottom
                            onClicked: {
                                if (controller.connected) {
                                    controller.disconnectDevice()
                                } else {
                                    controller.connectDevice()
                                }
                            }
                            background: Rectangle {
                                color: parent.down ?
                                    (controller.connected ? "#c43a1a" : "#1a6bc4") :
                                    (controller.connected ? "#e44a2a" : "#2a7be4")
                                radius: 4
                            }
                            contentItem: Text {
                                text: parent.text
                                color: "white"
                                horizontalAlignment: Text.AlignHCenter
                                verticalAlignment: Text.AlignVCenter
                            }
                        }
                    }
                }

                // –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                Rectangle {
                    Layout.preferredWidth: 150
                    Layout.preferredHeight: 30
                    color: "#333"
                    radius: 15
                    border.color: "#555"

                    RowLayout {
                        anchors.centerIn: parent
                        spacing: 8

                        Rectangle {
                            width: 12
                            height: 12
                            radius: 6
                            color: controller.connected ? "#4CAF50" : "#f44336"
                        }

                        Text {
                            text: controller.connected ? "–ü–æ–¥–∫–ª—é—á–µ–Ω–æ" : "–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ"
                            color: controller.connected ? "#4CAF50" : "#f44336"
                            font.pixelSize: 12
                        }
                    }
                }
            }
        }

        // === –ü–ê–ù–ï–õ–¨ –£–ü–†–ê–í–õ–ï–ù–ò–Ø ===
        Rectangle {
            Layout.fillWidth: true
            Layout.preferredHeight: 80
            color: "#2d2d2d"
            radius: 8

            RowLayout {
                anchors.fill: parent
                anchors.margins: 10
                spacing: 15

                // –õ–µ–≤–∞—è —á–∞—Å—Ç—å - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∂–∏–º–µ –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏
                ColumnLayout {
                    spacing: 5

                    Text {
                        text: controller.logMode ?
                              "üìÅ –†–µ–∂–∏–º –ª–æ–≥-—Ñ–∞–π–ª–∞" :
                              (controller.connected ? "üîå –†–µ–∂–∏–º COM-–ø–æ—Ä—Ç–∞" : "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                        color: controller.logMode ? "#4caf50" : (controller.connected ? "#2196f3" : "#ff9800")
                        font.pixelSize: 14
                        font.bold: true
                    }

                    Text {
                        text: controller.logMode ? controller.studyInfo : "–†–µ–∂–∏–º —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"
                        color: "#aaa"
                        font.pixelSize: 12
                        elide: Text.ElideRight
                        Layout.maximumWidth: 400
                    }
                }

                Item { Layout.fillWidth: true } // –†–∞—Å–ø–æ—Ä–∫–∞

                // –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - –∫–Ω–æ–ø–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞
                RowLayout {
                    spacing: 10

                    Button {
                        text: "üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–≥-—Ñ–∞–π–ª"
                        Layout.preferredWidth: 180
                        Layout.preferredHeight: 40
                        onClicked: {
                            showNotification("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞", false)
                        }
                        background: Rectangle {
                            color: parent.down ? "#3a5c42" : "#4caf50"
                            radius: 6
                        }
                        contentItem: Text {
                            text: parent.text
                            color: "white"
                            font.pixelSize: 14
                            horizontalAlignment: Text.AlignHCenter
                            verticalAlignment: Text.AlignVCenter
                        }
                    }

                    Button {
                        text: "üîå –ü–µ—Ä–µ–π—Ç–∏ –∫ COM-–ø–æ—Ä—Ç—É"
                        Layout.preferredWidth: 180
                        Layout.preferredHeight: 40
                        onClicked: controller.switchToCOMPortMode()
                        visible: controller.logMode
                        background: Rectangle {
                            color: parent.down ? "#1a4b6b" : "#2196f3"
                            radius: 6
                        }
                        contentItem: Text {
                            text: parent.text
                            color: "white"
                            font.pixelSize: 14
                            horizontalAlignment: Text.AlignHCenter
                            verticalAlignment: Text.AlignVCenter
                        }
                    }

                    Button {
                        text: "üéØ –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞"
                        Layout.preferredWidth: 120
                        Layout.preferredHeight: 40
                        background: Rectangle {
                            color: parent.down ? "#7c3a5c" : "#9c27b0"
                            radius: 6
                        }
                        contentItem: Text {
                            text: parent.text
                            color: "white"
                            font.pixelSize: 14
                            horizontalAlignment: Text.AlignHCenter
                            verticalAlignment: Text.AlignVCenter
                        }
                    }
                }
            }
        }

        // === –û–¢–õ–ê–î–û–ß–ù–´–ô –ë–õ–û–ö ===
        Rectangle {
            Layout.fillWidth: true
            Layout.preferredHeight: 160
            color: "#2d2d2d"
            radius: 8
            border.color: "#555"
            visible: true

            ColumnLayout {
                anchors.fill: parent
                anchors.margins: 10
                spacing: 5

                Text {
                    text: "–û–¢–õ–ê–î–ö–ê - –ò–ù–¢–ï–†–í–ê–õ–´ –ì–û–õ–û–í–û–ö–†–£–ñ–ï–ù–ò–Ø"
                    color: "#FF9800"
                    font.pixelSize: 12
                    font.bold: true
                }

                GridLayout {
                    Layout.fillWidth: true
                    columns: 2
                    columnSpacing: 10
                    rowSpacing: 5

                    Text { text: "–ê–∫—Ç–∏–≤–Ω–æ–µ –≥–æ–ª–æ–≤–æ–∫—Ä—É–∂–µ–Ω–∏–µ:"; color: "#aaa"; font.pixelSize: 10 }
                    Text {
                        text: controller.headModel.dizziness ? "–î–ê üî¥" : "–ù–ï–¢ üü¢"
                        color: controller.headModel.dizziness ? "#FFA000" : "#4CAF50"
                        font.pixelSize: 10
                        font.bold: true
                    }

                    Text { text: "–ò–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –≥–æ–ª–æ–≤–æ–∫—Ä—É–∂–µ–Ω–∏—è:"; color: "#aaa"; font.pixelSize: 10 }
                    Text {
                        text: controller.dizzinessData.length
                        color: controller.dizzinessData.length > 0 ? "#40FFA000" : "#aaa"
                        font.pixelSize: 10
                        font.bold: controller.dizzinessData.length > 0
                    }

                    Text { text: "–¢–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª:"; color: "#aaa"; font.pixelSize: 10 }
                    Text {
                        text: {
                            if (controller.headModel.dizziness) {
                                return "–ê–ö–¢–ò–í–ï–ù ‚è±Ô∏è"
                            } else if (controller.dizzinessData.length > 0) {
                                return "–ó–ê–í–ï–†–®–ï–ù ‚úÖ"
                            } else {
                                return "–û–¢–°–£–¢–°–¢–í–£–ï–¢ ‚ùå"
                            }
                        }
                        color: controller.headModel.dizziness ? "#FFA000" :
                               (controller.dizzinessData.length > 0 ? "#4CAF50" : "#aaa")
                        font.pixelSize: 10
                    }

                    Text { text: "–î–∞–Ω–Ω—ã–µ Pitch:"; color: "#aaa"; font.pixelSize: 10 }
                    Text {
                        text: controller.pitchGraphData.length + " —Ç–æ—á–µ–∫"
                        color: controller.pitchGraphData.length > 0 ? "#BB86FC" : "#f44336"
                        font.pixelSize: 10
                    }

                    Text { text: "–ß–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:"; color: "#aaa"; font.pixelSize: 10 }
                    Text {
                        text: controller.updateFrequency + " –ì—Ü"
                        color: "#2196f3"
                        font.pixelSize: 10
                    }

                    Text { text: "–†–µ–∂–∏–º:"; color: "#aaa"; font.pixelSize: 10 }
                    Text {
                        text: controller.connected ? "COM-–ø–æ—Ä—Ç" : (controller.logLoaded ? "–õ–æ–≥-—Ñ–∞–π–ª" : "–û–∂–∏–¥–∞–Ω–∏–µ")
                        color: controller.connected ? "#4CAF50" : (controller.logLoaded ? "#2196F3" : "#FF9800")
                        font.pixelSize: 10
                    }
                }

                // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ
                Rectangle {
                    Layout.fillWidth: true
                    Layout.preferredHeight: 20
                    color: "transparent"
                    visible: controller.dizzinessData.length > 0

                    Text {
                        text: {
                            if (controller.dizzinessData.length > 0) {
                                var lastInterval = controller.dizzinessData[controller.dizzinessData.length - 1]
                                var duration = (lastInterval.endTime - lastInterval.startTime) / 1000
                                return "–ü–æ—Å–ª–µ–¥–Ω–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: " + duration.toFixed(1) + " —Å–µ–∫"
                            }
                            return ""
                        }
                        color: "#40FFA000"
                        font.pixelSize: 9
                        font.bold: true
                    }
                }
            }
        }

        // === –û–°–ù–û–í–ù–ê–Ø –ß–ê–°–¢–¨ –≠–ö–†–ê–ù–ê - –†–ê–ó–î–ï–õ–ï–ù–ê –ù–ê 2 –°–¢–û–õ–ë–¶–ê ===
        RowLayout {
            Layout.fillWidth: true
            Layout.fillHeight: true
            spacing: 15

            // === –õ–ï–í–ê–Ø –ß–ê–°–¢–¨ - 2D –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø (60% —à–∏—Ä–∏–Ω—ã) ===
            ColumnLayout {
                Layout.fillWidth: true
                Layout.fillHeight: true
                Layout.preferredWidth: parent.width * 0.6
                spacing: 10

                // === PITCH (—Ç–∞–Ω–≥–∞–∂) - –ü–ï–†–í–ê–Ø –°–¢–†–û–ö–ê ===
                Rectangle {
                    id: pitchContainer
                    Layout.fillWidth: true
                    Layout.preferredHeight: 200
                    color: "#252525"
                    radius: 8
                    border.color: "#444"
                    border.width: 1

                    // –°–≤–æ–π—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –≤–∏–¥–∞
                    property bool isLeftView: true

                    // –í—ã—á–∏—Å–ª—è–µ–º–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤—Ä–∞—â–µ–Ω–∏—è
                    property real displayPitch: isLeftView ? controller.headModel.pitch : -controller.headModel.pitch

                    RowLayout {
                        anchors.fill: parent
                        anchors.margins: 10
                        spacing: 10

                        // –í–∏–¥ —Å–ª–µ–≤–∞/—Å–ø—Ä–∞–≤–∞ (PITCH) - –∫–≤–∞–¥—Ä–∞—Ç–Ω–∞—è –æ–±–ª–∞—Å—Ç—å —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
                        Rectangle {
                            id: pitchViewContainer
                            Layout.preferredWidth: 180
                            Layout.preferredHeight: 180
                            Layout.alignment: Qt.AlignCenter
                            color: "#1a1a1a"
                            radius: 6
                            border.color: "#333"

                            // –û–±–ª–∞—Å—Ç—å –∫–ª–∏–∫–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∞
                            MouseArea {
                                anchors.fill: parent
                                cursorShape: Qt.PointingHandCursor
                                onClicked: {
                                    pitchContainer.isLeftView = !pitchContainer.isLeftView
                                }
                                ToolTip.visible: containsMouse
                                ToolTip.text: "–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É –≤–∏–¥–æ–º —Å–ª–µ–≤–∞ –∏ —Å–ø—Ä–∞–≤–∞"
                                ToolTip.delay: 1000
                                hoverEnabled: true
                            }

                            // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ–ª–æ–≤—ã (–≤–∏–¥ —Å–ª–µ–≤–∞ –∏–ª–∏ —Å–ø—Ä–∞–≤–∞)
                            Image {
                                id: headImagePitch
                                anchors.fill: parent
                                anchors.margins: 15
                                source: pitchContainer.isLeftView ? "images/left_view.png" : "images/right_view.png"
                                fillMode: Image.PreserveAspectFit
                                rotation: pitchContainer.displayPitch  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã—á–∏—Å–ª—è–µ–º–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ
                                transformOrigin: Item.Center
                                smooth: true
                                opacity: controller.headModel.hasData ? 1.0 : 0.5

                                // –¢–æ—á–∫–∞ –≤—Ä–∞—â–µ–Ω–∏—è (—Ü–µ–Ω—Ç—Ä) - –≤–∏–∑—É–∞–ª—å–Ω—ã–π –º–∞—Ä–∫–µ—Ä
                                Rectangle {
                                    width: 6
                                    height: 6
                                    radius: 3
                                    color: "#FFA000"
                                    anchors.centerIn: parent
                                    visible: controller.headModel.hasData
                                }
                            }

                            // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞
                            Rectangle {
                                width: parent.width - 30
                                height: 1
                                color: controller.headModel.hasData ? "#FFA000" : "#666"
                                opacity: 0.5
                                anchors.centerIn: parent
                            }

                            // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–µ–∫—É—â–µ–≥–æ –≤–∏–¥–∞ —Å –ø–æ—è—Å–Ω–µ–Ω–∏–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                            Column {
                                anchors {
                                    top: parent.top
                                    left: parent.left
                                    margins: 5
                                }
                                spacing: 2

                                Text {
                                    text: pitchContainer.isLeftView ? "–°–õ–ï–í–ê" : "–°–ü–†–ê–í–ê"
                                    color: "#BB86FC"
                                    font.pixelSize: 10
                                    font.bold: true
                                }
                            }

                            // –ò–∫–æ–Ω–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤ —É–≥–ª—É
                            Rectangle {
                                width: 20
                                height: 20
                                radius: 10
                                color: "#333"
                                border.color: "#666"
                                border.width: 1
                                anchors {
                                    top: parent.top
                                    right: parent.right
                                    margins: 5
                                }

                                Text {
                                    anchors.centerIn: parent
                                    text: pitchContainer.isLeftView ? "‚Ü∫" : "‚Üª"
                                    color: pitchContainer.isLeftView ? "white" : "#FFA000"
                                    font.pixelSize: 10
                                    font.bold: true
                                }
                            }

                            // –¢–µ–∫—Å—Ç —Å —Ç–µ–∫—É—â–∏–º —É–≥–ª–æ–º
                            Text {
                                anchors {
                                    bottom: parent.bottom
                                    horizontalCenter: parent.horizontalCenter
                                    bottomMargin: 5
                                }
                                text: controller.headModel.hasData ? controller.headModel.pitch.toFixed(1) + "¬∞" : ""
                                color: "#FFA000"
                                font.pixelSize: 12
                                font.bold: true
                            }
                        }

                        // –ë–ª–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö PITCH (–æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å –¥–∞—Ç—á–∏–∫–∞)
                        ColumnLayout {
                            Layout.fillHeight: true
                            Layout.preferredWidth: 100
                            spacing: 10

                            Rectangle {
                                Layout.preferredWidth: 140
                                Layout.preferredHeight: 40
                                color: "#252525"
                                radius: 6

                                Column {
                                    anchors.centerIn: parent
                                    spacing: 5

                                    Text {
                                        text: "–¢–ê–ù–ì–ê–ñ / PITCH"
                                        color: "#BB86FC"
                                        font.pixelSize: 16
                                        font.bold: true
                                        anchors.horizontalCenter: parent.horizontalCenter
                                    }
                                }
                            }

                            Rectangle {
                                Layout.preferredWidth: 140
                                Layout.preferredHeight: 60
                                color: "#2d2d2d"
                                radius: 6
                                border.color: "#BB86FC"
                                border.width: 2

                                Column {
                                    anchors.centerIn: parent
                                    spacing: 5

                                    Text {
                                        text: "–¢–ï–ö–£–©–ò–ô –£–ì–û–õ"
                                        color: "#BB86FC"
                                        font.pixelSize: 12
                                        font.bold: true
                                        anchors.horizontalCenter: parent.horizontalCenter
                                    }

                                    Text {
                                        text: formatValue(controller.headModel.pitch, controller.headModel.hasData)
                                        color: controller.headModel.hasData ? "white" : "#888"
                                        font.pixelSize: controller.headModel.hasData ? 18 : 14
                                        font.bold: controller.headModel.hasData
                                        anchors.horizontalCenter: parent.horizontalCenter
                                    }
                                }
                            }

                            Rectangle {
                                Layout.preferredWidth: 140
                                Layout.preferredHeight: 60
                                color: "#2d2d2d"
                                radius: 6
                                border.color: "#BB86FC"
                                border.width: 2

                                Column {
                                    anchors.centerIn: parent
                                    spacing: 5

                                    Text {
                                        text: "–£–ì–õ–û–í–ê–Ø –°–ö–û–†–û–°–¢–¨"
                                        color: "#BB86FC"
                                        font.pixelSize: 12
                                        font.bold: true
                                        anchors.horizontalCenter: parent.horizontalCenter
                                    }

                                    Text {
                                        text: {
                                            if (controller.connected && controller.headModel.hasData) {
                                                return formatSpeed(controller.headModel.speedPitch, true)
                                            } else if (controller.logLoaded && controller.headModel.hasData) {
                                                return formatSpeed(controller.headModel.speedPitch, true)
                                            } else {
                                                return "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                                            }
                                        }
                                        color: (controller.connected || controller.logLoaded) && controller.headModel.hasData ? "white" : "#888"
                                        font.pixelSize: ((controller.connected || controller.logLoaded) && controller.headModel.hasData) ? 16 : 14
                                        font.bold: (controller.connected || controller.logLoaded) && controller.headModel.hasData
                                        anchors.horizontalCenter: parent.horizontalCenter
                                    }
                                }
                            }

                            // // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–µ–∫—É—â–µ–≥–æ –≤–∏–¥–∞
                            // Rectangle {
                            //     Layout.preferredWidth: 120
                            //     Layout.preferredHeight: 25
                            //     color: "transparent"
                            //     border.color: "#03DAC6"
                            //     border.width: 1
                            //     radius: 4

                            //     Text {
                            //         anchors.centerIn: parent
                            //         text: pitchContainer.isLeftView ? "–°–õ–ï–í–ê" : "–°–ü–†–ê–í–ê"
                            //         // text: rollContainer.isFrontView ? "–í–ò–î –°–ü–ï–†–ï–î–ò" : "–í–ò–î –°–ó–ê–î–ò"
                            //         color: "#03DAC6"
                            //         font.pixelSize: 9
                            //         font.bold: true
                            //     }
                            // }
                        }

                        // –ì—Ä–∞—Ñ–∏–∫ PITCH (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
                        Rectangle {
                            Layout.fillWidth: true
                            Layout.fillHeight: true
                            color: "#252525"
                            radius: 8
                            border.color: "#444"
                            border.width: 1

                            ColumnLayout {
                                anchors.fill: parent
                                spacing: 2

                                Text {
                                    text: "–ì—Ä–∞—Ñ–∏–∫ PITCH (" + controller.graphDuration + " —Å–µ–∫)"
                                    color: "#666"
                                    font.pixelSize: 12
                                    Layout.topMargin: 5
                                    Layout.alignment: Qt.AlignHCenter
                                }

                                GraphCanvas {
                                    id: pitchGraph
                                    Layout.fillWidth: true
                                    Layout.fillHeight: true
                                    graphData: controller.pitchGraphData
                                    dizzinessData: controller.dizzinessData
                                    graphDuration: controller.graphDuration
                                    lineColor: "#BB86FC"
                                    minValue: -120
                                    maxValue: 120
                                }
                            }
                        }
                    }
                }

                // === ROLL (–∫—Ä–µ–Ω) - –í–¢–û–†–ê–Ø –°–¢–†–û–ö–ê ===
                Rectangle {
                    id: rollContainer
                    Layout.fillWidth: true
                    Layout.preferredHeight: 200
                    color: "#252525"
                    radius: 8
                    border.color: "#444"
                    border.width: 1

                    // –°–≤–æ–π—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –≤–∏–¥–∞
                    property bool isFrontView: true

                    // –í—ã—á–∏—Å–ª—è–µ–º–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤—Ä–∞—â–µ–Ω–∏—è
                    property real displayRoll: isFrontView ? -controller.headModel.roll : controller.headModel.roll

                    RowLayout {
                        anchors.fill: parent
                        anchors.margins: 10
                        spacing: 10

                        // –í–∏–¥ —Å–ø–µ—Ä–µ–¥–∏/—Å–∑–∞–¥–∏ (ROLL) - –∫–≤–∞–¥—Ä–∞—Ç–Ω–∞—è –æ–±–ª–∞—Å—Ç—å —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
                        Rectangle {
                            id: rollViewContainer
                            Layout.preferredWidth: 180
                            Layout.preferredHeight: 180
                            Layout.alignment: Qt.AlignCenter
                            color: "#1a1a1a"
                            radius: 6
                            border.color: "#333"

                            // –û–±–ª–∞—Å—Ç—å –∫–ª–∏–∫–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∞
                            MouseArea {
                                anchors.fill: parent
                                cursorShape: Qt.PointingHandCursor
                                onClicked: {
                                    rollContainer.isFrontView = !rollContainer.isFrontView
                                }
                                ToolTip.visible: containsMouse
                                ToolTip.text: "–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É –≤–∏–¥–æ–º —Å–ø–µ—Ä–µ–¥–∏ –∏ —Å–∑–∞–¥–∏"
                                ToolTip.delay: 1000
                                hoverEnabled: true
                            }

                            // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ–ª–æ–≤—ã (–≤–∏–¥ —Å–ø–µ—Ä–µ–¥–∏ –∏–ª–∏ —Å–∑–∞–¥–∏)
                            Image {
                                id: headImageRoll
                                anchors.fill: parent
                                anchors.margins: 15
                                source: rollContainer.isFrontView ? "images/front_view.png" : "images/back_view.png"
                                fillMode: Image.PreserveAspectFit
                                rotation: rollContainer.displayRoll  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã—á–∏—Å–ª—è–µ–º–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ
                                transformOrigin: Item.Center
                                smooth: true
                                opacity: controller.headModel.hasData ? 1.0 : 0.5

                                // –¢–æ—á–∫–∞ –≤—Ä–∞—â–µ–Ω–∏—è (—Ü–µ–Ω—Ç—Ä) - –≤–∏–∑—É–∞–ª—å–Ω—ã–π –º–∞—Ä–∫–µ—Ä
                                Rectangle {
                                    width: 6
                                    height: 6
                                    radius: 3
                                    color: "#FFA000"
                                    anchors.centerIn: parent
                                    visible: controller.headModel.hasData
                                }
                            }

                            // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞
                            Rectangle {
                                width: 1
                                height: parent.height - 30
                                color: controller.headModel.hasData ? "#FFA000" : "#666"
                                opacity: 0.5
                                anchors.centerIn: parent
                            }

                            // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–µ–∫—É—â–µ–≥–æ –≤–∏–¥–∞ —Å –ø–æ—è—Å–Ω–µ–Ω–∏–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                            Column {
                                anchors {
                                    top: parent.top
                                    left: parent.left
                                    margins: 5
                                }
                                spacing: 2

                                Text {
                                    text: rollContainer.isFrontView ? "–°–ü–ï–†–ï–î–ò" : "–°–ó–ê–î–ò"
                                    color: "#03DAC6"
                                    font.pixelSize: 10
                                    font.bold: true
                                }
                            }

                            // –ò–∫–æ–Ω–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤ —É–≥–ª—É
                            Rectangle {
                                width: 20
                                height: 20
                                radius: 10
                                color: "#333"
                                border.color: "#666"
                                border.width: 1
                                anchors {
                                    top: parent.top
                                    right: parent.right
                                    margins: 5
                                }

                                Text {
                                    anchors.centerIn: parent
                                    text: rollContainer.isFrontView ? "‚Ü∫" : "‚Üª"
                                    color: rollContainer.isFrontView ? "white" : "#FFA000"
                                    font.pixelSize: 10
                                    font.bold: true
                                }
                            }

                            // –¢–µ–∫—Å—Ç —Å —Ç–µ–∫—É—â–∏–º —É–≥–ª–æ–º (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                            Text {
                                anchors {
                                    bottom: parent.bottom
                                    horizontalCenter: parent.horizontalCenter
                                    bottomMargin: 5
                                }
                                text: controller.headModel.hasData ? controller.headModel.roll.toFixed(1) + "¬∞" : ""
                                color: "#FFA000"
                                font.pixelSize: 12
                                font.bold: true
                            }
                        }

                        // –ë–ª–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö ROLL (–æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å –¥–∞—Ç—á–∏–∫–∞)
                        ColumnLayout {
                            Layout.fillHeight: true
                            Layout.preferredWidth: 100
                            spacing: 10

                            Rectangle {
                                Layout.preferredWidth: 140
                                Layout.preferredHeight: 40
                                color: "#252525"
                                radius: 6

                                Column {
                                    anchors.centerIn: parent
                                    spacing: 5

                                    Text {
                                        text: "–ö–†–ï–ù / ROLL"
                                        color: "#03DAC6"
                                        font.pixelSize: 16
                                        font.bold: true
                                        anchors.horizontalCenter: parent.horizontalCenter
                                    }
                                }
                            }

                            Rectangle {
                                Layout.preferredWidth: 140
                                Layout.preferredHeight: 60
                                color: "#2d2d2d"
                                radius: 6
                                border.color: "#03DAC6"
                                border.width: 2

                                Column {
                                    anchors.centerIn: parent
                                    spacing: 5

                                    Text {
                                        text: "–¢–ï–ö–£–©–ò–ô –£–ì–û–õ"
                                        color: "#03DAC6"
                                        font.pixelSize: 12
                                        font.bold: true
                                        anchors.horizontalCenter: parent.horizontalCenter
                                    }

                                    Text {
                                        text: formatValue(controller.headModel.roll, controller.headModel.hasData)
                                        color: controller.headModel.hasData ? "white" : "#888"
                                        font.pixelSize: controller.headModel.hasData ? 18 : 14
                                        font.bold: controller.headModel.hasData
                                        anchors.horizontalCenter: parent.horizontalCenter
                                    }
                                }
                            }

                            Rectangle {
                                Layout.preferredWidth: 140
                                Layout.preferredHeight: 60
                                color: "#2d2d2d"
                                radius: 6
                                border.color: "#03DAC6"
                                border.width: 2

                                Column {
                                    anchors.centerIn: parent
                                    spacing: 5

                                    Text {
                                        text: "–£–ì–õ–û–í–ê–Ø –°–ö–û–†–û–°–¢–¨"
                                        color: "#03DAC6"
                                        font.pixelSize: 12
                                        font.bold: true
                                        anchors.horizontalCenter: parent.horizontalCenter
                                    }

                                    Text {
                                        text: {
                                            if (controller.connected && controller.headModel.hasData) {
                                                return formatSpeed(controller.headModel.speedRoll, true)
                                            } else if (controller.logLoaded && controller.headModel.hasData) {
                                                return formatSpeed(controller.headModel.speedRoll, true)
                                            } else {
                                                return "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                                            }
                                        }
                                        color: (controller.connected || controller.logLoaded) && controller.headModel.hasData ? "white" : "#888"
                                        font.pixelSize: ((controller.connected || controller.logLoaded) && controller.headModel.hasData) ? 16 : 14
                                        font.bold: (controller.connected || controller.logLoaded) && controller.headModel.hasData
                                        anchors.horizontalCenter: parent.horizontalCenter
                                    }
                                }
                            }

                            // // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–µ–∫—É—â–µ–≥–æ –≤–∏–¥–∞
                            // Rectangle {
                            //     Layout.preferredWidth: 120
                            //     Layout.preferredHeight: 25
                            //     color: "transparent"
                            //     border.color: "#03DAC6"
                            //     border.width: 1
                            //     radius: 4

                            //     Text {
                            //         anchors.centerIn: parent
                            //         text: rollContainer.isFrontView ? "–í–ò–î –°–ü–ï–†–ï–î–ò" : "–í–ò–î –°–ó–ê–î–ò"
                            //         color: "#03DAC6"
                            //         font.pixelSize: 9
                            //         font.bold: true
                            //     }
                            // }
                        }

                        // –ì—Ä–∞—Ñ–∏–∫ ROLL (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
                        Rectangle {
                            Layout.fillWidth: true
                            Layout.fillHeight: true
                            color: "#252525"
                            radius: 8
                            border.color: "#444"
                            border.width: 1

                            ColumnLayout {
                                anchors.fill: parent
                                spacing: 0

                                Text {
                                    text: "–ì—Ä–∞—Ñ–∏–∫ ROLL (" + controller.graphDuration + " —Å–µ–∫)"
                                    color: "#666"
                                    font.pixelSize: 12
                                    Layout.topMargin: 5
                                    Layout.alignment: Qt.AlignHCenter
                                }

                                GraphCanvas {
                                    id: rollGraph
                                    Layout.fillWidth: true
                                    Layout.fillHeight: true
                                    graphData: controller.rollGraphData
                                    dizzinessData: controller.dizzinessData
                                    graphDuration: controller.graphDuration
                                    lineColor: "#03DAC6"
                                    minValue: -120
                                    maxValue: 120
                                }
                            }
                        }
                    }
                }

                // === YAW (—Ä—ã—Å–∫–∞–Ω–∏–µ) - –¢–†–ï–¢–¨–Ø –°–¢–†–û–ö–ê ===
                Rectangle {
                    id: yawContainer
                    Layout.fillWidth: true
                    Layout.preferredHeight: 200
                    color: "#252525"
                    radius: 8
                    border.color: "#444"
                    border.width: 1

                    // –°–≤–æ–π—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    property bool isFlipped: false

                    RowLayout {
                        anchors.fill: parent
                        anchors.margins: 10
                        spacing: 10

                        // –í–∏–¥ —Å–≤–µ—Ä—Ö—É (YAW) - –∫–≤–∞–¥—Ä–∞—Ç–Ω–∞—è –æ–±–ª–∞—Å—Ç—å —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç–∞
                        Rectangle {
                            id: yawViewContainer
                            Layout.preferredWidth: 180
                            Layout.preferredHeight: 180
                            Layout.alignment: Qt.AlignCenter
                            color: "#1a1a1a"
                            radius: 6
                            border.color: "#333"

                            // –û–±–ª–∞—Å—Ç—å –∫–ª–∏–∫–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç–∞
                            MouseArea {
                                anchors.fill: parent
                                cursorShape: Qt.PointingHandCursor
                                onClicked: {
                                    yawContainer.isFlipped = !yawContainer.isFlipped
                                }
                                ToolTip.visible: containsMouse
                                ToolTip.text: "–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
                                ToolTip.delay: 1000
                                hoverEnabled: true
                            }

                            // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ–ª–æ–≤—ã (–≤–∏–¥ —Å–≤–µ—Ä—Ö—É)
                            Image {
                                id: headImageYaw
                                anchors.fill: parent
                                anchors.margins: 15
                                source: "images/top_view.png"
                                fillMode: Image.PreserveAspectFit
                                rotation: yawContainer.isFlipped ? (180 + controller.headModel.yaw) : controller.headModel.yaw
                                transformOrigin: Item.Center
                                smooth: true
                                opacity: controller.headModel.hasData ? 1.0 : 0.5

                                // –ê–Ω–∏–º–∞—Ü–∏–∏
                                Behavior on rotation {
                                    PropertyAnimation { duration: 300 }
                                }
                                Behavior on opacity {
                                    NumberAnimation { duration: 200 }
                                }

                                // –¢–æ—á–∫–∞ –≤—Ä–∞—â–µ–Ω–∏—è (—Ü–µ–Ω—Ç—Ä) - –≤–∏–∑—É–∞–ª—å–Ω—ã–π –º–∞—Ä–∫–µ—Ä
                                Rectangle {
                                    width: 6
                                    height: 6
                                    radius: 3
                                    color: "#FFA000"
                                    anchors.centerIn: parent
                                    visible: controller.headModel.hasData
                                }
                            }

                            // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞
                            Rectangle {
                                width: 1
                                height: parent.height - 30
                                color: controller.headModel.hasData ? "#FFA000" : "#666"
                                opacity: 0.5
                                anchors.centerIn: parent
                            }

                            // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤–∏–¥–∞ (–≤—Å–µ–≥–¥–∞ "–°–í–ï–†–•–£")
                            Column {
                                anchors {
                                    top: parent.top
                                    left: parent.left
                                    margins: 5
                                }
                                spacing: 2

                                Text {
                                    text: "–°–í–ï–†–•–£"
                                    color: "#CF6679"
                                    font.pixelSize: 10
                                    font.bold: true
                                }

                                // Text {
                                //     text: "‚äï –ø–æ —á.—Å.\n‚äñ –ø—Ä–æ—Ç–∏–≤ —á.—Å."
                                //     color: "#888"
                                //     font.pixelSize: 8
                                // }
                            }

                            // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç–∞ (–ò–∫–æ–Ω–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤ —É–≥–ª—É)
                            Rectangle {
                                width: 20
                                height: 20
                                radius: 10
                                color: "#333"
                                border.color: "#666"
                                border.width: 1
                                anchors {
                                    top: parent.top
                                    right: parent.right
                                    margins: 5
                                }

                                Text {
                                    anchors.centerIn: parent
                                    text: yawContainer.isFlipped ? "‚Üª" : "‚Ü∫"
                                    color: yawContainer.isFlipped ? "#FFA000" : "white"
                                    font.pixelSize: 10
                                    font.bold: true
                                }
                            }

                            // –¢–µ–∫—Å—Ç —Å —Ç–µ–∫—É—â–∏–º —É–≥–ª–æ–º
                            Text {
                                anchors {
                                    bottom: parent.bottom
                                    horizontalCenter: parent.horizontalCenter
                                    bottomMargin: 5
                                }
                                text: controller.headModel.hasData ? controller.headModel.yaw.toFixed(1) + "¬∞" : ""
                                color: "#FFA000"
                                font.pixelSize: 12
                                font.bold: true
                            }
                        }

                        // –ë–ª–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö YAW (–æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å –¥–∞—Ç—á–∏–∫–∞)
                        ColumnLayout {
                            Layout.fillHeight: true
                            Layout.preferredWidth: 100
                            spacing: 10

                            Rectangle {
                                Layout.preferredWidth: 140
                                Layout.preferredHeight: 40
                                color: "#252525"
                                radius: 6

                                Column {
                                    anchors.centerIn: parent
                                    spacing: 5

                                    Text {
                                        text: "–†–´–°–ö–ê–ù–¨–ï / YAW"
                                        color: "#CF6679"
                                        font.pixelSize: 16
                                        font.bold: true
                                        anchors.horizontalCenter: parent.horizontalCenter
                                    }
                                }
                            }

                            Rectangle {
                                Layout.preferredWidth: 140
                                Layout.preferredHeight: 60
                                color: "#2d2d2d"
                                radius: 6
                                border.color: "#CF6679"
                                border.width: 2

                                Column {
                                    anchors.centerIn: parent
                                    spacing: 5

                                    Text {
                                        text: "YAW"
                                        color: "#CF6679"
                                        font.pixelSize: 12
                                        font.bold: true
                                        anchors.horizontalCenter: parent.horizontalCenter
                                    }

                                    Text {
                                        text: formatValue(controller.headModel.yaw, controller.headModel.hasData)
                                        color: controller.headModel.hasData ? "white" : "#888"
                                        font.pixelSize: controller.headModel.hasData ? 18 : 14
                                        font.bold: controller.headModel.hasData
                                        anchors.horizontalCenter: parent.horizontalCenter
                                    }

                                    // // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å—å —Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
                                    // Text {
                                    //     text: {
                                    //         if (!controller.headModel.hasData) return ""
                                    //         return controller.headModel.yaw > 0 ?
                                    //             "–ø–æ —á.—Å." :
                                    //             (controller.headModel.yaw < 0 ? "–ø—Ä–æ—Ç–∏–≤ —á.—Å." : "–ø—Ä—è–º–æ")
                                    //     }
                                    //     color: "#CF6679"
                                    //     font.pixelSize: 9
                                    //     anchors.horizontalCenter: parent.horizontalCenter
                                    // }
                                }
                            }

                            Rectangle {
                                Layout.preferredWidth: 140
                                Layout.preferredHeight: 60
                                color: "#2d2d2d"
                                radius: 6
                                border.color: "#CF6679"
                                border.width: 2

                                Column {
                                    anchors.centerIn: parent
                                    spacing: 5

                                    Text {
                                        text: "–£–ì–õ–û–í–ê–Ø –°–ö–û–†–û–°–¢–¨"
                                        color: "#CF6679"
                                        font.pixelSize: 12
                                        font.bold: true
                                        anchors.horizontalCenter: parent.horizontalCenter
                                    }

                                    Text {
                                        text: {
                                            if (controller.connected && controller.headModel.hasData) {
                                                return formatSpeed(controller.headModel.speedYaw, true)
                                            } else if (controller.logLoaded && controller.headModel.hasData) {
                                                return formatSpeed(controller.headModel.speedYaw, true)
                                            } else {
                                                return "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                                            }
                                        }
                                        color: (controller.connected || controller.logLoaded) && controller.headModel.hasData ? "white" : "#888"
                                        font.pixelSize: ((controller.connected || controller.logLoaded) && controller.headModel.hasData) ? 16 : 14
                                        font.bold: (controller.connected || controller.logLoaded) && controller.headModel.hasData
                                        anchors.horizontalCenter: parent.horizontalCenter
                                    }
                                }
                            }
                        }

                        // –ì—Ä–∞—Ñ–∏–∫ YAW (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
                        Rectangle {
                            Layout.fillWidth: true
                            Layout.fillHeight: true
                            color: "#252525"
                            radius: 8
                            border.color: "#444"
                            border.width: 1

                            ColumnLayout {
                                anchors.fill: parent
                                spacing: 0

                                Text {
                                    text: "–ì—Ä–∞—Ñ–∏–∫ YAW (" + controller.graphDuration + " —Å–µ–∫)"
                                    color: "#666"
                                    font.pixelSize: 12
                                    Layout.topMargin: 5
                                    Layout.alignment: Qt.AlignHCenter
                                }

                                GraphCanvas {
                                    id: yawGraph
                                    Layout.fillWidth: true
                                    Layout.fillHeight: true
                                    graphData: controller.yawGraphData
                                    dizzinessData: controller.dizzinessData
                                    graphDuration: controller.graphDuration
                                    lineColor: "#CF6679"
                                    minValue: -120
                                    maxValue: 120
                                }
                            }
                        }
                    }
                }
            }

            // === –ü–†–ê–í–ê–Ø –ß–ê–°–¢–¨ - 3D –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø (40% —à–∏—Ä–∏–Ω—ã) ===
            ColumnLayout {
                Layout.fillWidth: true
                Layout.fillHeight: true
                Layout.preferredWidth: parent.width * 0.4
                spacing: 10

                // 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≥–æ–ª–æ–≤—ã
                Rectangle {
                    Layout.fillWidth: true
                    Layout.fillHeight: true
                    color: "#252525"
                    radius: 8
                    border.color: "#444"
                    border.width: 1

                    Column {
                        anchors.fill: parent
                        anchors.margins: 15
                        spacing: 10

                        Text {
                            text: "3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª–æ–∂–µ–Ω–∏—è –≥–æ–ª–æ–≤—ã"
                            color: "white"
                            font.pixelSize: 16
                            font.bold: true
                            anchors.horizontalCenter: parent.horizontalCenter
                        }

                        // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è OpenGL 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
                        Rectangle {
                            id: visualizationContainer
                            width: parent.width
                            height: parent.height - 100
                            color: "#1a1a1a"
                            radius: 6
                            border.color: "#333"
                            border.width: 1

                            // –ü—Ä–æ—Å—Ç–∞—è 3D-—Å–µ—Ç–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
                            Canvas {
                                id: threeDCanvas
                                anchors.fill: parent
                                anchors.margins: 5

                                onPaint: {
                                    var ctx = getContext("2d")
                                    ctx.clearRect(0, 0, width, height)

                                    // 3D —Å–µ—Ç–∫–∞
                                    ctx.strokeStyle = "#333"
                                    ctx.lineWidth = 1

                                    // –ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–µ –ª–∏–Ω–∏–∏
                                    for (var i = 0; i <= 4; i++) {
                                        var pos = i * width/4
                                        ctx.beginPath()
                                        ctx.moveTo(pos, 0)
                                        ctx.lineTo(width/2, height/2)
                                        ctx.stroke()

                                        ctx.beginPath()
                                        ctx.moveTo(pos, height)
                                        ctx.lineTo(width/2, height/2)
                                        ctx.stroke()
                                    }

                                    if (controller.headModel.hasData) {
                                        // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≥–æ–ª–æ–≤–∞ (–∫—É–± –≤ –∏–∑–æ–º–µ—Ç—Ä–∏–∏)
                                        ctx.strokeStyle = "#4CAF50"
                                        ctx.lineWidth = 2
                                        ctx.beginPath()
                                        // –ü–µ—Ä–µ–¥–Ω—è—è –≥—Ä–∞–Ω—å
                                        ctx.moveTo(width/2 - 40, height/2 - 30)
                                        ctx.lineTo(width/2 + 40, height/2 - 30)
                                        ctx.lineTo(width/2 + 40, height/2 + 50)
                                        ctx.lineTo(width/2 - 40, height/2 + 50)
                                        ctx.closePath()
                                        ctx.stroke()

                                        // –ó–∞–¥–Ω—è—è –≥—Ä–∞–Ω—å
                                        ctx.beginPath()
                                        ctx.moveTo(width/2 - 20, height/2 - 50)
                                        ctx.lineTo(width/2 + 60, height/2 - 50)
                                        ctx.lineTo(width/2 + 60, height/2 + 30)
                                        ctx.lineTo(width/2 - 20, height/2 + 30)
                                        ctx.closePath()
                                        ctx.stroke()

                                        // –°–æ–µ–¥–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
                                        ctx.beginPath()
                                        ctx.moveTo(width/2 - 40, height/2 - 30)
                                        ctx.lineTo(width/2 - 20, height/2 - 50)
                                        ctx.moveTo(width/2 + 40, height/2 - 30)
                                        ctx.lineTo(width/2 + 60, height/2 - 50)
                                        ctx.moveTo(width/2 + 40, height/2 + 50)
                                        ctx.lineTo(width/2 + 60, height/2 + 30)
                                        ctx.moveTo(width/2 - 40, height/2 + 50)
                                        ctx.lineTo(width/2 - 20, height/2 + 30)
                                        ctx.stroke()

                                        // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –≥–æ–ª–æ–≤–æ–∫—Ä—É–∂–µ–Ω–∏—è - –∫—Ä—É–≥–æ–≤–æ–π –≥—Ä–∞–¥–∏–µ–Ω—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ä–∞–¥–∏—É—Å–∞–º–∏
                                        if (controller.headModel.dizziness) {
                                            // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –æ–±–ª–∞—Å—Ç–∏
                                            var a = width;   // —à–∏—Ä–∏–Ω–∞ –æ–±–ª–∞—Å—Ç–∏ 3D
                                            var b = height;  // –≤—ã—Å–æ—Ç–∞ –æ–±–ª–∞—Å—Ç–∏ 3D

                                            // –ù–∞—Ö–æ–¥–∏–º –º–µ–Ω—å—à–∏–π —Ä–∞–∑–º–µ—Ä
                                            var minSize = Math.min(a, b);

                                            // –ù–∞—á–∞–ª—å–Ω—ã–π —Ä–∞–¥–∏—É—Å (90% –æ—Ç –ø–æ–ª–æ–≤–∏–Ω—ã –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞)
                                            var startRadius = minSize * 0.9 / 2;

                                            // –ö–æ–Ω–µ—á–Ω—ã–π —Ä–∞–¥–∏—É—Å (–±–æ–ª—å—à–∏–π —Ä–∞–∑–º–µ—Ä, —É–º–Ω–æ–∂–µ–Ω–Ω—ã–π –Ω–∞ 2)
                                            var endRadius = Math.max(a, b) * 0.9;

                                            // –¶–µ–Ω—Ç—Ä –æ–±–ª–∞—Å—Ç–∏
                                            var centerX = a / 2;
                                            var centerY = b / 2;

                                            // –°–æ–∑–¥–∞–µ–º –∫—Ä—É–≥–æ–≤–æ–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
                                            var gradient = ctx.createRadialGradient(
                                                centerX, centerY, startRadius,  // —Ü–µ–Ω—Ç—Ä –∏ –Ω–∞—á–∞–ª—å–Ω—ã–π —Ä–∞–¥–∏—É—Å
                                                centerX, centerY, endRadius     // —Ü–µ–Ω—Ç—Ä –∏ –∫–æ–Ω–µ—á–Ω—ã–π —Ä–∞–¥–∏—É—Å
                                            );

                                            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç
                                            gradient.addColorStop(0, 'rgba(255, 160, 0, 0)');      // –ü—Ä–æ–∑—Ä–∞—á–Ω–æ –Ω–∞ –Ω–∞—á–∞–ª—å–Ω–æ–º —Ä–∞–¥–∏—É—Å–µ
                                            gradient.addColorStop(0.5, 'rgba(255, 160, 0, 0.2)');  // –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω–æ –Ω–∞ —Å–µ—Ä–µ–¥–∏–Ω–µ
                                            gradient.addColorStop(1, 'rgba(255, 160, 0, 0.4)');    // –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ –Ω–∞ –∫–æ–Ω–µ—á–Ω–æ–º —Ä–∞–¥–∏—É—Å–µ

                                            // –ü—Ä–∏–º–µ–Ω—è–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç –∫–æ –≤—Å–µ–π –æ–±–ª–∞—Å—Ç–∏
                                            ctx.fillStyle = gradient;
                                            ctx.fillRect(0, 0, width, height);

                                            // –¢–µ–∫—Å—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
                                            ctx.fillStyle = "#FFA000";
                                            ctx.font = "bold 20px Arial";
                                            ctx.textAlign = "center";
                                            ctx.fillText("–ì–û–õ–û–í–û–ö–†–£–ñ–ï–ù–ò–ï", width/2, 30);
                                        }
                                    } else {
                                        // –¢–µ–∫—Å—Ç "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                                        ctx.fillStyle = "#666";
                                        ctx.font = "16px Arial";
                                        ctx.textAlign = "center";
                                        ctx.fillText("–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö", width/2, height/2);
                                    }
                                }
                            }

                            // –¢–∞–π–º–µ—Ä –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏
                            Timer {
                                id: refreshTimer
                                interval: 100
                                running: true
                                repeat: true
                                onTriggered: {
                                    threeDCanvas.requestPaint();
                                }
                            }
                        }

                        // –¢–µ–∫—Å—Ç —Å —É–≥–ª–∞–º–∏ –≤–Ω–∏–∑—É
                        Rectangle {
                            width: parent.width
                            height: 60
                            color: "#2d2d2d"
                            radius: 6

                            Column {
                                anchors.centerIn: parent
                                spacing: 5

                                Text {
                                    text: "–¢–µ–∫—É—â–∏–µ —É–≥–ª—ã:"
                                    color: "#aaa"
                                    font.pixelSize: 12
                                    anchors.horizontalCenter: parent.horizontalCenter
                                }

                                Text {
                                    text: controller.headModel.hasData ?
                                          "Pitch: " + controller.headModel.pitch.toFixed(1) + "¬∞ | " +
                                          "Roll: " + controller.headModel.roll.toFixed(1) + "¬∞ | " +
                                          "Yaw: " + controller.headModel.yaw.toFixed(1) + "¬∞" :
                                          "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                                    color: controller.headModel.hasData ? "white" : "#888"
                                    font.pixelSize: 14
                                    anchors.horizontalCenter: parent.horizontalCenter
                                }
                            }
                        }
                    }

                    // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≥–æ–ª–æ–≤–æ–∫—Ä—É–∂–µ–Ω–∏—è
                    Connections {
                        target: controller.headModel
                        function onDizzinessChanged() {
                            threeDCanvas.requestPaint();
                        }
                        function onPitchChanged() {
                            threeDCanvas.requestPaint();
                        }
                        function onRollChanged() {
                            threeDCanvas.requestPaint();
                        }
                        function onYawChanged() {
                            threeDCanvas.requestPaint();
                        }
                    }
                }
            }
        }

        // === –£–ü–†–ê–í–õ–ï–ù–ò–ï –õ–û–ì-–§–ê–ô–õ–û–ú ===
        Rectangle {
            Layout.fillWidth: true
            Layout.preferredHeight: 140
            color: controller.logControlsEnabled ? "#2d2d2d" : "#3d3d3d"
            radius: 8
            border.color: controller.logControlsEnabled ? "#555" : "#444"
            border.width: 1
            opacity: controller.logControlsEnabled ? 1.0 : 0.7

            ColumnLayout {
                anchors.fill: parent
                anchors.margins: 15
                spacing: 10

                Text {
                    text: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º –ª–æ–≥-—Ñ–∞–π–ª–∞"
                    color: controller.logControlsEnabled ? "white" : "#888"
                    font.pixelSize: 16
                    font.bold: true
                }

                // –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É
                RowLayout {
                    Layout.fillWidth: true
                    spacing: 10

                    TextField {
                        id: filePathField
                        Layout.fillWidth: true
                        placeholderText: "–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –ª–æ–≥-—Ñ–∞–π–ª—É"
                        selectByMouse: true
                        color: controller.logControlsEnabled ? "white" : "#888"
                        enabled: !controller.connected
                        background: Rectangle {
                            color: controller.logControlsEnabled ? "#3c3c3c" : "#2c2c2c"
                            radius: 4
                        }
                    }

                    Button {
                        text: "–ó–∞–≥—Ä—É–∑–∏—Ç—å"
                        onClicked: {
                            if (filePathField.text !== "") {
                                controller.loadLogFile(filePathField.text)
                            }
                        }
                        enabled: !controller.connected
                        background: Rectangle {
                            color: parent.down ? "#3a5c42" : (parent.enabled ? "#4caf50" : "#3a5c42")
                            radius: 4
                        }
                        contentItem: Text {
                            text: parent.text
                            color: "white"
                            horizontalAlignment: Text.AlignHCenter
                            verticalAlignment: Text.AlignVCenter
                        }
                    }
                }

                RowLayout {
                    Layout.fillWidth: true
                    spacing: 10

                    // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                    Button {
                        text: "‚èÆÔ∏è"
                        Layout.preferredWidth: 50
                        onClicked: controller.seekLog(0)
                        enabled: controller.logControlsEnabled
                        ToolTip.text: "–í –Ω–∞—á–∞–ª–æ"
                        background: Rectangle {
                            color: parent.down ? "#5a5a5a" : (parent.enabled ? "#3c3c3c" : "#2c2c2c")
                            radius: 4
                        }
                    }

                    Button {
                        text: "‚è™"
                        Layout.preferredWidth: 50
                        onClicked: controller.seekLog(Math.max(0, controller.currentTime - 10))
                        enabled: controller.logControlsEnabled
                        ToolTip.text: "–ù–∞–∑–∞–¥ –Ω–∞ 10—Å"
                        background: Rectangle {
                            color: parent.down ? "#5a5a5a" : (parent.enabled ? "#3c3c3c" : "#2c2c2c")
                            radius: 4
                        }
                    }

                    Button {
                        id: playPauseBtn
                        text: controller.logPlaying ? "‚è∏Ô∏è" : "‚ñ∂Ô∏è"
                        Layout.preferredWidth: 80
                        onClicked: controller.logPlaying ? controller.pauseLog() : controller.playLog()
                        enabled: controller.logControlsEnabled
                        ToolTip.text: controller.logPlaying ? "–ü–∞—É–∑–∞" : "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
                        background: Rectangle {
                            color: parent.down ? "#3a5c42" : (parent.enabled ? "#4caf50" : "#3a5c42")
                            radius: 4
                        }
                        contentItem: Text {
                            text: parent.text
                            color: "white"
                            font.pixelSize: 14
                            horizontalAlignment: Text.AlignHCenter
                            verticalAlignment: Text.AlignVCenter
                        }
                    }

                    Button {
                        text: "‚è©"
                        Layout.preferredWidth: 50
                        onClicked: controller.seekLog(Math.min(controller.totalTime, controller.currentTime + 10))
                        enabled: controller.logControlsEnabled
                        ToolTip.text: "–í–ø–µ—Ä–µ–¥ –Ω–∞ 10—Å"
                        background: Rectangle {
                            color: parent.down ? "#5a5a5a" : (parent.enabled ? "#3c3c3c" : "#2c2c2c")
                            radius: 4
                        }
                    }

                    Button {
                        text: "‚è≠Ô∏è"
                        Layout.preferredWidth: 50
                        onClicked: controller.seekLog(controller.totalTime)
                        enabled: controller.logControlsEnabled
                        ToolTip.text: "–í –∫–æ–Ω–µ—Ü"
                        background: Rectangle {
                            color: parent.down ? "#5a5a5a" : (parent.enabled ? "#3c3c3c" : "#2c2c2c")
                            radius: 4
                        }
                    }

                    Button {
                        text: "‚èπÔ∏è"
                        Layout.preferredWidth: 50
                        onClicked: controller.stopLog()
                        enabled: controller.logControlsEnabled
                        ToolTip.text: "–°—Ç–æ–ø"
                        background: Rectangle {
                            color: parent.down ? "#7c3a3a" : (parent.enabled ? "#f44336" : "#7c3a3a")
                            radius: 4
                        }
                    }

                    Item { Layout.fillWidth: true } // –†–∞—Å–ø–æ—Ä–∫–∞

                    Text {
                        text: {
                            var currentMinutes = Math.floor(controller.currentTime / 60)
                            var currentSeconds = Math.floor(controller.currentTime % 60)
                            var totalMinutes = Math.floor(controller.totalTime / 60)
                            var totalSeconds = Math.floor(controller.totalTime % 60)
                            return (currentMinutes < 10 ? "0" : "") + currentMinutes + ":" +
                                   (currentSeconds < 10 ? "0" : "") + currentSeconds + " / " +
                                   (totalMinutes < 10 ? "0" : "") + totalMinutes + ":" +
                                   (totalSeconds < 10 ? "0" : "") + totalSeconds
                        }
                        color: controller.logControlsEnabled ? "#ccc" : "#888"
                        font.pixelSize: 14
                    }
                }

                // –ü–æ–ª–∑—É–Ω–æ–∫ –≤—Ä–µ–º–µ–Ω–∏
                Slider {
                    Layout.fillWidth: true
                    from: 0
                    to: controller.totalTime
                    value: controller.currentTime
                    onMoved: controller.seekLog(value)
                    enabled: controller.logControlsEnabled && !controller.logPlaying
                    background: Rectangle {
                        color: controller.logControlsEnabled ? "#3c3c3c" : "#2c2c2c"
                        radius: 2
                        height: 4
                    }
                    handle: Rectangle {
                        width: 16
                        height: 16
                        radius: 8
                        color: controller.logControlsEnabled ? "#2196f3" : "#666"
                        border.color: controller.logControlsEnabled ? "#1976d2" : "#555"
                        border.width: 2
                    }
                }
            }
        }
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ C++
    Connections {
        target: controller
        function onNotificationChanged(message) {
            showNotification(message, false)
        }

        function onConnectedChanged(connected) {
            if (connected) {
                showNotification("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ " + controller.selectedPort, false)
            } else {
                showNotification("–û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç COM-–ø–æ—Ä—Ç–∞", false)
            }
        }

        function onLogLoadedChanged(loaded) {
            if (loaded) {
                showNotification("–õ–æ–≥-—Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω", false)
            }
        }

        function onLogModeChanged(logMode) {
            if (logMode) {
                showNotification("–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –≤ —Ä–µ–∂–∏–º –ª–æ–≥-—Ñ–∞–π–ª–∞", false)
            }
        }
    }

    // –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–±–æ–µ–≤ COM-–ø–æ—Ä—Ç–∞
    Connections {
        target: controller
        function onConnectedChanged(connected) {
            if (!connected) {
                cleanupTimer.restart()
            }
        }
    }

    Timer {
        id: cleanupTimer
        interval: 100
        onTriggered: {
            if (controller && controller.headModel) {
                // –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º - –ø—Ä–æ—Å—Ç–æ –¥–∞–µ–º –≤—Ä–µ–º—è —Å–∏—Å—Ç–µ–º–µ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è
            }
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
    function handleCriticalError(message) {
        console.error("Critical error:", message)
        showNotification("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: " + message, true)
    }

    // –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    Component.onCompleted: {
        timer.start()
        console.log("Application started, headModel.hasData:", controller.headModel.hasData)
        console.log("Initial roll value:", controller.headModel.roll)
    }

    Timer {
        id: timer
        interval: 1000
        onTriggered: {
            showNotification("–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ", false)
        }
    }
}
