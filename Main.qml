import QtQuick
import QtQuick.Window
import QtQuick.Controls
import QtQuick.Layouts
import QtQuick.Shapes

ApplicationWindow {
    id: mainWindow
    width: 1400
    height: 900
    minimumWidth: 1200
    minimumHeight: 700
    visible: true
    title: "–ú–æ–Ω–∏—Ç–æ—Ä –ø–æ–ª–æ–∂–µ–Ω–∏—è –≥–æ–ª–æ–≤—ã"
    color: "#1e1e1e"

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    function showNotification(message, isError) {
        notificationText.text = message
        notificationBackground.color = isError ? "#f44336" : "#4CAF50"
        notificationLayout.height = 40
        notificationTimer.restart()
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π
    function formatValue(value, hasData) {
        return hasData ? value.toFixed(1) + "¬∞" : "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    }

    function formatSpeed(value, hasData) {
        return hasData ? value.toFixed(1) + "¬∞/—Å" : "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    }

    ColumnLayout {
        anchors.fill: parent
        anchors.margins: 10
        spacing: 10

        // === –í–ï–†–•–ù–Ø–Ø –ü–ê–ù–ï–õ–¨: –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø + –ù–ê–°–¢–†–û–ô–ö–ò –ü–û–†–¢–ê ===
        RowLayout {
            Layout.fillWidth: true
            spacing: 15

            // === –õ–ï–í–ê–Ø –ß–ê–°–¢–¨ - –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø ===
            Rectangle {
                Layout.fillWidth: true
                Layout.preferredHeight: notificationLayout.height
                color: "transparent"
                clip: true

                Rectangle {
                    id: notificationLayout
                    width: parent.width
                    height: 0
                    color: "transparent"
                    clip: true
                    radius: 6

                    Behavior on height {
                        NumberAnimation { duration: 300; easing.type: Easing.OutCubic }
                    }

                    Rectangle {
                        id: notificationBackground
                        anchors.fill: parent
                        color: "#4CAF50"
                        radius: 6

                        RowLayout {
                            anchors.fill: parent
                            anchors.margins: 10
                            spacing: 10

                            Text {
                                id: notificationIcon
                                text: "üí°"
                                font.pixelSize: 16
                                color: "white"
                            }

                            Text {
                                id: notificationText
                                text: ""
                                color: "white"
                                font.pixelSize: 14
                                Layout.fillWidth: true
                                wrapMode: Text.Wrap
                            }

                            Button {
                                text: "‚úï"
                                Layout.preferredWidth: 30
                                Layout.preferredHeight: 30
                                onClicked: {
                                    notificationLayout.height = 0
                                    notificationTimer.stop()
                                }
                                background: Rectangle {
                                    color: "transparent"
                                    border.color: "white"
                                    border.width: 1
                                    radius: 4
                                }
                                contentItem: Text {
                                    text: parent.text
                                    color: "white"
                                    font.pixelSize: 12
                                    horizontalAlignment: Text.AlignHCenter
                                    verticalAlignment: Text.AlignVCenter
                                }
                            }
                        }
                    }

                    Timer {
                        id: notificationTimer
                        interval: 5000
                        onTriggered: {
                            notificationLayout.height = 0
                        }
                    }
                }
            }

            // === –ü–†–ê–í–ê–Ø –ß–ê–°–¢–¨ - –ù–ê–°–¢–†–û–ô–ö–ò –ü–û–†–¢–ê –ò –°–¢–ê–¢–£–° ===
            RowLayout {
                spacing: 15

                // –ë–ª–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ COM-–ø–æ—Ä—Ç–∞
                Rectangle {
                    Layout.preferredWidth: 350
                    Layout.preferredHeight: 80
                    color: "#2d2d2d"
                    radius: 8

                    RowLayout {
                        anchors.fill: parent
                        anchors.margins: 10
                        spacing: 10

                        ColumnLayout {
                            Layout.fillWidth: true
                            spacing: 5

                            Text {
                                text: "COM –ø–æ—Ä—Ç"
                                color: "#aaa"
                                font.pixelSize: 12
                            }

                            ComboBox {
                                id: comPortCombo
                                Layout.fillWidth: true
                                model: controller.availablePorts
                                onActivated: controller.selectedPort = currentText
                                background: Rectangle {
                                    color: "#3c3c3c"
                                    radius: 4
                                }
                            }
                        }

                        Button {
                            text: controller.connected ? "–û—Ç–∫–ª—é—á–∏—Ç—å" : "–ü–æ–¥–∫–ª—é—á–∏—Ç—å"
                            Layout.preferredWidth: 100
                            Layout.alignment: Qt.AlignBottom
                            onClicked: {
                                if (controller.connected) {
                                    controller.disconnectDevice()
                                } else {
                                    controller.connectDevice()
                                }
                            }
                            background: Rectangle {
                                color: parent.down ?
                                    (controller.connected ? "#c43a1a" : "#1a6bc4") :
                                    (controller.connected ? "#e44a2a" : "#2a7be4")
                                radius: 4
                            }
                            contentItem: Text {
                                text: parent.text
                                color: "white"
                                horizontalAlignment: Text.AlignHCenter
                                verticalAlignment: Text.AlignVCenter
                            }
                        }
                    }
                }

                // –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                Rectangle {
                    Layout.preferredWidth: 150
                    Layout.preferredHeight: 30
                    color: "#333"
                    radius: 15
                    border.color: "#555"

                    RowLayout {
                        anchors.centerIn: parent
                        spacing: 8

                        Rectangle {
                            width: 12
                            height: 12
                            radius: 6
                            color: controller.connected ? "#4CAF50" : "#f44336"
                        }

                        Text {
                            text: controller.connected ? "–ü–æ–¥–∫–ª—é—á–µ–Ω–æ" : "–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ"
                            color: controller.connected ? "#4CAF50" : "#f44336"
                            font.pixelSize: 12
                        }
                    }
                }
            }
        }

        // === –ü–ê–ù–ï–õ–¨ –£–ü–†–ê–í–õ–ï–ù–ò–Ø ===
        Rectangle {
            Layout.fillWidth: true
            Layout.preferredHeight: 80
            color: "#2d2d2d"
            radius: 8

            RowLayout {
                anchors.fill: parent
                anchors.margins: 10
                spacing: 15

                // –õ–µ–≤–∞—è —á–∞—Å—Ç—å - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∂–∏–º–µ –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏
                ColumnLayout {
                    spacing: 5

                    Text {
                        text: controller.logMode ?
                              "üìÅ –†–µ–∂–∏–º –ª–æ–≥-—Ñ–∞–π–ª–∞" :
                              (controller.connected ? "üîå –†–µ–∂–∏–º COM-–ø–æ—Ä—Ç–∞" : "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                        color: controller.logMode ? "#4caf50" : (controller.connected ? "#2196f3" : "#ff9800")
                        font.pixelSize: 14
                        font.bold: true
                    }

                    Text {
                        text: controller.logMode ? controller.studyInfo : "–†–µ–∂–∏–º —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"
                        color: "#aaa"
                        font.pixelSize: 12
                        elide: Text.ElideRight
                        Layout.maximumWidth: 400
                    }
                }

                Item { Layout.fillWidth: true } // –†–∞—Å–ø–æ—Ä–∫–∞

                // –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - –∫–Ω–æ–ø–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞
                RowLayout {
                    spacing: 10

                    Button {
                        text: "üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–≥-—Ñ–∞–π–ª"
                        Layout.preferredWidth: 180
                        Layout.preferredHeight: 40
                        onClicked: {
                            // –ë—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –ø—É—Ç–∏
                            showNotification("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞", false)
                        }
                        background: Rectangle {
                            color: parent.down ? "#3a5c42" : "#4caf50"
                            radius: 6
                        }
                        contentItem: Text {
                            text: parent.text
                            color: "white"
                            font.pixelSize: 14
                            horizontalAlignment: Text.AlignHCenter
                            verticalAlignment: Text.AlignVCenter
                        }
                    }

                    Button {
                        text: "üîå –ü–µ—Ä–µ–π—Ç–∏ –∫ COM-–ø–æ—Ä—Ç—É"
                        Layout.preferredWidth: 180
                        Layout.preferredHeight: 40
                        onClicked: controller.switchToCOMPortMode()
                        visible: controller.logMode
                        background: Rectangle {
                            color: parent.down ? "#1a4b6b" : "#2196f3"
                            radius: 6
                        }
                        contentItem: Text {
                            text: parent.text
                            color: "white"
                            font.pixelSize: 14
                            horizontalAlignment: Text.AlignHCenter
                            verticalAlignment: Text.AlignVCenter
                        }
                    }

                    Button {
                        text: "üéØ –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞"
                        Layout.preferredWidth: 120
                        Layout.preferredHeight: 40
                        background: Rectangle {
                            color: parent.down ? "#7c3a5c" : "#9c27b0"
                            radius: 6
                        }
                        contentItem: Text {
                            text: parent.text
                            color: "white"
                            font.pixelSize: 14
                            horizontalAlignment: Text.AlignHCenter
                            verticalAlignment: Text.AlignVCenter
                        }
                    }

                    Button {
                        text: "üß™ –¢–µ—Å—Ç –¥–∞–Ω–Ω—ã–µ"
                        Layout.preferredWidth: 120
                        Layout.preferredHeight: 40
                        onClicked: controller.setTestData()
                        background: Rectangle {
                            color: parent.down ? "#5a3a7c" : "#673ab7"
                            radius: 6
                        }
                        contentItem: Text {
                            text: parent.text
                            color: "white"
                            font.pixelSize: 14
                            horizontalAlignment: Text.AlignHCenter
                            verticalAlignment: Text.AlignVCenter
                        }
                    }
                }
            }
        }

        // === –û–°–ù–û–í–ù–ê–Ø –ß–ê–°–¢–¨ –≠–ö–†–ê–ù–ê - –†–ê–ó–î–ï–õ–ï–ù–ê –ù–ê 2 –°–¢–û–õ–ë–¶–ê ===
        RowLayout {
            Layout.fillWidth: true
            Layout.fillHeight: true
            spacing: 15

            // === –õ–ï–í–ê–Ø –ß–ê–°–¢–¨ - 2D –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø (60% —à–∏—Ä–∏–Ω—ã) ===
            ColumnLayout {
                Layout.fillWidth: true
                Layout.fillHeight: true
                Layout.preferredWidth: parent.width * 0.6
                spacing: 10

                // === PITCH (—Ç–∞–Ω–≥–∞–∂) - –ü–ï–†–í–ê–Ø –°–¢–†–û–ö–ê ===
                Rectangle {
                    Layout.fillWidth: true
                    Layout.preferredHeight: 200
                    color: "#252525"
                    radius: 8
                    border.color: "#444"
                    border.width: 1

                    RowLayout {
                        anchors.fill: parent
                        anchors.margins: 10
                        spacing: 10

                        // –ü—Ä–æ—Ñ–∏–ª—å –ª–∏—Ü–∞ (PITCH)
                        Rectangle {
                            Layout.fillHeight: true
                            Layout.preferredWidth: 200
                            color: "#1a1a1a"
                            radius: 6
                            border.color: "#333"

                            Canvas {
                                anchors.fill: parent
                                onPaint: {
                                    var ctx = getContext("2d")
                                    ctx.strokeStyle = "#333"
                                    ctx.lineWidth = 1

                                    // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
                                    for (var x = 0; x <= width; x += 20) {
                                        ctx.beginPath()
                                        ctx.moveTo(x, 0)
                                        ctx.lineTo(x, height)
                                        ctx.stroke()
                                    }

                                    // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
                                    for (var y = 0; y <= height; y += 20) {
                                        ctx.beginPath()
                                        ctx.moveTo(0, y)
                                        ctx.lineTo(width, y)
                                        ctx.stroke()
                                    }
                                }
                            }

                            // –õ–∏–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≥–æ–ª–æ–≤–∞)
                            Shape {
                                anchors.centerIn: parent
                                width: 150
                                height: 150

                                ShapePath {
                                    strokeColor: "#BB86FC"
                                    strokeWidth: 3
                                    fillColor: "transparent"

                                    startX: 0; startY: 75
                                    PathLine { x: 150; y: 75 } // –ë–∞–∑–æ–≤–∞—è –ª–∏–Ω–∏—è
                                }

                                // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–∫–ª–æ–Ω–∞
                                Rectangle {
                                    width: 120
                                    height: 4
                                    color: controller.headModel.hasData ? "#BB86FC" : "#666"
                                    rotation: controller.headModel.pitch
                                    anchors.centerIn: parent
                                }
                            }

                            Text {
                                anchors.bottom: parent.bottom
                                anchors.horizontalCenter: parent.horizontalCenter
                                anchors.bottomMargin: 5
                                text: "–í–∏–¥ —Å–±–æ–∫—É (PITCH)"
                                color: "#888"
                                font.pixelSize: 12
                            }
                        }

                        // –ë–ª–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö PITCH
                        ColumnLayout {
                            Layout.fillHeight: true
                            Layout.preferredWidth: 120
                            spacing: 10

                            // –£–≥–æ–ª –Ω–∞–∫–ª–æ–Ω–∞
                            Rectangle {
                                Layout.preferredWidth: 180
                                Layout.preferredHeight: 70
                                color: "#2d2d2d"
                                radius: 6
                                border.color: "#BB86FC"
                                border.width: 2

                                Column {
                                    anchors.centerIn: parent
                                    spacing: 5

                                    Text {
                                        text: "PITCH"
                                        color: "#BB86FC"
                                        font.pixelSize: 12
                                        font.bold: true
                                        anchors.horizontalCenter: parent.horizontalCenter
                                    }

                                    Text {
                                        text: formatValue(controller.headModel.pitch, controller.headModel.hasData)
                                        color: controller.headModel.hasData ? "white" : "#888"
                                        font.pixelSize: controller.headModel.hasData ? 18 : 14
                                        font.bold: controller.headModel.hasData
                                        anchors.horizontalCenter: parent.horizontalCenter
                                    }
                                }
                            }

                            // –°–∫–æ—Ä–æ—Å—Ç—å –ø–æ–≤–æ—Ä–æ—Ç–∞
                            Rectangle {
                                Layout.preferredWidth: 180
                                Layout.preferredHeight: 70
                                color: "#2d2d2d"
                                radius: 6
                                border.color: "#03DAC6"
                                border.width: 2

                                Column {
                                    anchors.centerIn: parent
                                    spacing: 5

                                    Text {
                                        text: "–°–ö–û–†–û–°–¢–¨ PITCH"
                                        color: "#03DAC6"
                                        font.pixelSize: 10
                                        anchors.horizontalCenter: parent.horizontalCenter
                                    }

                                    Text {
                                        text: controller.logLoaded ?
                                              formatSpeed(controller.headModel.speedPitch, controller.headModel.hasData) :
                                              "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                                        color: (controller.logLoaded && controller.headModel.hasData) ? "white" : "#888"
                                        font.pixelSize: (controller.logLoaded && controller.headModel.hasData) ? 16 : 14
                                        font.bold: (controller.logLoaded && controller.headModel.hasData)
                                        anchors.horizontalCenter: parent.horizontalCenter
                                    }
                                }
                            }
                        }

                        // –ì—Ä–∞—Ñ–∏–∫ PITCH
                        Rectangle {
                            Layout.fillWidth: true
                            Layout.fillHeight: true
                            color: "#1a1a1a"
                            radius: 6
                            border.color: "#333"

                            Text {
                                anchors.top: parent.top
                                anchors.horizontalCenter: parent.horizontalCenter
                                anchors.topMargin: 5
                                text: "–ì—Ä–∞—Ñ–∏–∫ PITCH (30 —Å–µ–∫)"
                                color: "#666"
                                font.pixelSize: 12
                            }

                            Canvas {
                                anchors.fill: parent
                                anchors.margins: 10
                                anchors.topMargin: 25

                                onPaint: {
                                    var ctx = getContext("2d")
                                    ctx.clearRect(0, 0, width, height)

                                    // –û—Å—å X
                                    ctx.strokeStyle = "#555"
                                    ctx.lineWidth = 1
                                    ctx.beginPath()
                                    ctx.moveTo(0, height/2)
                                    ctx.lineTo(width, height/2)
                                    ctx.stroke()

                                    if (controller.headModel.hasData) {
                                        // –°–∏–Ω—É—Å–æ–∏–¥–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
                                        ctx.strokeStyle = "#BB86FC"
                                        ctx.lineWidth = 2
                                        ctx.beginPath()
                                        for (var x = 0; x < width; x++) {
                                            var y = height/2 + Math.sin(x/20 + Date.now()/1000) * height/3
                                            if (x === 0) ctx.moveTo(x, y)
                                            else ctx.lineTo(x, y)
                                        }
                                        ctx.stroke()
                                    } else {
                                        // –¢–µ–∫—Å—Ç "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                                        ctx.fillStyle = "#666"
                                        ctx.font = "14px Arial"
                                        ctx.textAlign = "center"
                                        ctx.fillText("–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö", width/2, height/2)
                                    }
                                }

                                Timer {
                                    interval: 50
                                    running: true
                                    repeat: true
                                    onTriggered: parent.requestPaint()
                                }
                            }
                        }
                    }
                }

                // === ROLL (–∫—Ä–µ–Ω) - –í–¢–û–†–ê–Ø –°–¢–†–û–ö–ê ===
                Rectangle {
                    Layout.fillWidth: true
                    Layout.preferredHeight: 200
                    color: "#252525"
                    radius: 8
                    border.color: "#444"
                    border.width: 1

                    RowLayout {
                        anchors.fill: parent
                        anchors.margins: 10
                        spacing: 10

                        // –í–∏–¥ —Å–∑–∞–¥–∏ (ROLL)
                        Rectangle {
                            Layout.fillHeight: true
                            Layout.preferredWidth: 200
                            color: "#1a1a1a"
                            radius: 6
                            border.color: "#333"

                            Canvas {
                                anchors.fill: parent
                                onPaint: {
                                    var ctx = getContext("2d")
                                    ctx.strokeStyle = "#333"
                                    ctx.lineWidth = 1

                                    for (var x = 0; x <= width; x += 20) {
                                        ctx.beginPath()
                                        ctx.moveTo(x, 0)
                                        ctx.lineTo(x, height)
                                        ctx.stroke()
                                    }

                                    for (var y = 0; y <= height; y += 20) {
                                        ctx.beginPath()
                                        ctx.moveTo(0, y)
                                        ctx.lineTo(width, y)
                                        ctx.stroke()
                                    }
                                }
                            }

                            // –ö—Ä—É–≥ –¥–ª—è –≤–∏–¥–∞ —Å–≤–µ—Ä—Ö—É/—Å–∑–∞–¥–∏
                            Rectangle {
                                width: 100
                                height: 100
                                radius: 50
                                color: "transparent"
                                border.color: "#03DAC6"
                                border.width: 2
                                anchors.centerIn: parent

                                // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∫—Ä–µ–Ω–∞
                                Rectangle {
                                    width: 80
                                    height: 4
                                    color: controller.headModel.hasData ? "#03DAC6" : "#666"
                                    rotation: controller.headModel.roll
                                    anchors.centerIn: parent
                                }
                            }

                            Text {
                                anchors.bottom: parent.bottom
                                anchors.horizontalCenter: parent.horizontalCenter
                                anchors.bottomMargin: 5
                                text: "–í–∏–¥ —Å–∑–∞–¥–∏ (ROLL)"
                                color: "#888"
                                font.pixelSize: 12
                            }
                        }

                        // –ë–ª–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö ROLL
                        ColumnLayout {
                            Layout.fillHeight: true
                            Layout.preferredWidth: 120
                            spacing: 10

                            Rectangle {
                                Layout.preferredWidth: 180
                                Layout.preferredHeight: 70
                                color: "#2d2d2d"
                                radius: 6
                                border.color: "#03DAC6"
                                border.width: 2

                                Column {
                                    anchors.centerIn: parent
                                    spacing: 5

                                    Text {
                                        text: "ROLL"
                                        color: "#03DAC6"
                                        font.pixelSize: 12
                                        font.bold: true
                                        anchors.horizontalCenter: parent.horizontalCenter
                                    }

                                    Text {
                                        text: formatValue(controller.headModel.roll, controller.headModel.hasData)
                                        color: controller.headModel.hasData ? "white" : "#888"
                                        font.pixelSize: controller.headModel.hasData ? 18 : 14
                                        font.bold: controller.headModel.hasData
                                        anchors.horizontalCenter: parent.horizontalCenter
                                    }
                                }
                            }

                            Rectangle {
                                Layout.preferredWidth: 180
                                Layout.preferredHeight: 70
                                color: "#2d2d2d"
                                radius: 6
                                border.color: "#BB86FC"
                                border.width: 2

                                Column {
                                    anchors.centerIn: parent
                                    spacing: 5

                                    Text {
                                        text: "–°–ö–û–†–û–°–¢–¨ ROLL"
                                        color: "#BB86FC"
                                        font.pixelSize: 10
                                        anchors.horizontalCenter: parent.horizontalCenter
                                    }

                                    Text {
                                        text: controller.logLoaded ?
                                              formatSpeed(controller.headModel.speedRoll, controller.headModel.hasData) :
                                              "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                                        color: (controller.logLoaded && controller.headModel.hasData) ? "white" : "#888"
                                        font.pixelSize: (controller.logLoaded && controller.headModel.hasData) ? 16 : 14
                                        font.bold: (controller.logLoaded && controller.headModel.hasData)
                                        anchors.horizontalCenter: parent.horizontalCenter
                                    }
                                }
                            }
                        }

                        // –ì—Ä–∞—Ñ–∏–∫ ROLL
                        Rectangle {
                            Layout.fillWidth: true
                            Layout.fillHeight: true
                            color: "#1a1a1a"
                            radius: 6
                            border.color: "#333"

                            Text {
                                anchors.top: parent.top
                                anchors.horizontalCenter: parent.horizontalCenter
                                anchors.topMargin: 5
                                text: "–ì—Ä–∞—Ñ–∏–∫ ROLL (30 —Å–µ–∫)"
                                color: "#666"
                                font.pixelSize: 12
                            }

                            Canvas {
                                anchors.fill: parent
                                anchors.margins: 10
                                anchors.topMargin: 25

                                onPaint: {
                                    var ctx = getContext("2d")
                                    ctx.clearRect(0, 0, width, height)

                                    ctx.strokeStyle = "#555"
                                    ctx.lineWidth = 1
                                    ctx.beginPath()
                                    ctx.moveTo(0, height/2)
                                    ctx.lineTo(width, height/2)
                                    ctx.stroke()

                                    if (controller.headModel.hasData) {
                                        ctx.strokeStyle = "#03DAC6"
                                        ctx.lineWidth = 2
                                        ctx.beginPath()
                                        for (var x = 0; x < width; x++) {
                                            var y = height/2 + Math.cos(x/25 + Date.now()/800) * height/3
                                            if (x === 0) ctx.moveTo(x, y)
                                            else ctx.lineTo(x, y)
                                        }
                                        ctx.stroke()
                                    } else {
                                        // –¢–µ–∫—Å—Ç "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                                        ctx.fillStyle = "#666"
                                        ctx.font = "14px Arial"
                                        ctx.textAlign = "center"
                                        ctx.fillText("–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö", width/2, height/2)
                                    }
                                }

                                Timer {
                                    interval: 50
                                    running: true
                                    repeat: true
                                    onTriggered: parent.requestPaint()
                                }
                            }
                        }
                    }
                }

                // === YAW (—Ä—ã—Å–∫–∞–Ω–∏–µ) - –¢–†–ï–¢–¨–Ø –°–¢–†–û–ö–ê ===
                Rectangle {
                    Layout.fillWidth: true
                    Layout.preferredHeight: 200
                    color: "#252525"
                    radius: 8
                    border.color: "#444"
                    border.width: 1

                    RowLayout {
                        anchors.fill: parent
                        anchors.margins: 10
                        spacing: 10

                        // –í–∏–¥ —Å–≤–µ—Ä—Ö—É (YAW)
                        Rectangle {
                            Layout.fillHeight: true
                            Layout.preferredWidth: 200
                            color: "#1a1a1a"
                            radius: 6
                            border.color: "#333"

                            Canvas {
                                anchors.fill: parent
                                onPaint: {
                                    var ctx = getContext("2d")
                                    ctx.strokeStyle = "#333"
                                    ctx.lineWidth = 1

                                    for (var x = 0; x <= width; x += 20) {
                                        ctx.beginPath()
                                        ctx.moveTo(x, 0)
                                        ctx.lineTo(x, height)
                                        ctx.stroke()
                                    }

                                    for (var y = 0; y <= height; y += 20) {
                                        ctx.beginPath()
                                        ctx.moveTo(0, y)
                                        ctx.lineTo(width, y)
                                        ctx.stroke()
                                    }
                                }
                            }

                            // –°—Ç—Ä–µ–ª–∫–∞ –¥–ª—è –≤–∏–¥–∞ —Å–≤–µ—Ä—Ö—É
                            Shape {
                                anchors.centerIn: parent
                                width: 100
                                height: 100

                                ShapePath {
                                    strokeColor: "#CF6679"
                                    strokeWidth: 3
                                    fillColor: "transparent"

                                    startX: 50; startY: 80
                                    PathLine { x: 50; y: 20 }
                                    PathLine { x: 40; y: 40 }
                                    PathMove { x: 50; y: 20 }
                                    PathLine { x: 60; y: 40 }
                                }

                                // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–æ–≤–æ—Ä–æ—Ç–∞
                                Rectangle {
                                    width: 4
                                    height: 60
                                    color: controller.headModel.hasData ? "#CF6679" : "#666"
                                    rotation: controller.headModel.yaw
                                    anchors.centerIn: parent
                                }
                            }

                            Text {
                                anchors.bottom: parent.bottom
                                anchors.horizontalCenter: parent.horizontalCenter
                                anchors.bottomMargin: 5
                                text: "–í–∏–¥ —Å–≤–µ—Ä—Ö—É (YAW)"
                                color: "#888"
                                font.pixelSize: 12
                            }
                        }

                        // –ë–ª–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö YAW
                        ColumnLayout {
                            Layout.fillHeight: true
                            Layout.preferredWidth: 120
                            spacing: 10

                            Rectangle {
                                Layout.preferredWidth: 180
                                Layout.preferredHeight: 70
                                color: "#2d2d2d"
                                radius: 6
                                border.color: "#CF6679"
                                border.width: 2

                                Column {
                                    anchors.centerIn: parent
                                    spacing: 5

                                    Text {
                                        text: "YAW"
                                        color: "#CF6679"
                                        font.pixelSize: 12
                                        font.bold: true
                                        anchors.horizontalCenter: parent.horizontalCenter
                                    }

                                    Text {
                                        text: formatValue(controller.headModel.yaw, controller.headModel.hasData)
                                        color: controller.headModel.hasData ? "white" : "#888"
                                        font.pixelSize: controller.headModel.hasData ? 18 : 14
                                        font.bold: controller.headModel.hasData
                                        anchors.horizontalCenter: parent.horizontalCenter
                                    }
                                }
                            }

                            Rectangle {
                                Layout.preferredWidth: 180
                                Layout.preferredHeight: 70
                                color: "#2d2d2d"
                                radius: 6
                                border.color: "#FF9800"
                                border.width: 2

                                Column {
                                    anchors.centerIn: parent
                                    spacing: 5

                                    Text {
                                        text: "–°–ö–û–†–û–°–¢–¨ YAW"
                                        color: "#FF9800"
                                        font.pixelSize: 10
                                        anchors.horizontalCenter: parent.horizontalCenter
                                    }

                                    Text {
                                        text: controller.logLoaded ?
                                              formatSpeed(controller.headModel.speedYaw, controller.headModel.hasData) :
                                              "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                                        color: (controller.logLoaded && controller.headModel.hasData) ? "white" : "#888"
                                        font.pixelSize: (controller.logLoaded && controller.headModel.hasData) ? 16 : 14
                                        font.bold: (controller.logLoaded && controller.headModel.hasData)
                                        anchors.horizontalCenter: parent.horizontalCenter
                                    }
                                }
                            }
                        }

                        // –ì—Ä–∞—Ñ–∏–∫ YAW
                        Rectangle {
                            Layout.fillWidth: true
                            Layout.fillHeight: true
                            color: "#1a1a1a"
                            radius: 6
                            border.color: "#333"

                            Text {
                                anchors.top: parent.top
                                anchors.horizontalCenter: parent.horizontalCenter
                                anchors.topMargin: 5
                                text: "–ì—Ä–∞—Ñ–∏–∫ YAW (30 —Å–µ–∫)"
                                color: "#666"
                                font.pixelSize: 12
                            }

                            Canvas {
                                anchors.fill: parent
                                anchors.margins: 10
                                anchors.topMargin: 25

                                onPaint: {
                                    var ctx = getContext("2d")
                                    ctx.clearRect(0, 0, width, height)

                                    ctx.strokeStyle = "#555"
                                    ctx.lineWidth = 1
                                    ctx.beginPath()
                                    ctx.moveTo(0, height/2)
                                    ctx.lineTo(width, height/2)
                                    ctx.stroke()

                                    if (controller.headModel.hasData) {
                                        ctx.strokeStyle = "#CF6679"
                                        ctx.lineWidth = 2
                                        ctx.beginPath()
                                        for (var x = 0; x < width; x++) {
                                            var y = height/2 + Math.sin(x/30 + Date.now()/1200) * height/3
                                            if (x === 0) ctx.moveTo(x, y)
                                            else ctx.lineTo(x, y)
                                        }
                                        ctx.stroke()
                                    } else {
                                        // –¢–µ–∫—Å—Ç "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                                        ctx.fillStyle = "#666"
                                        ctx.font = "14px Arial"
                                        ctx.textAlign = "center"
                                        ctx.fillText("–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö", width/2, height/2)
                                    }
                                }

                                Timer {
                                    interval: 50
                                    running: true
                                    repeat: true
                                    onTriggered: parent.requestPaint()
                                }
                            }
                        }
                    }
                }
            }

            // === –ü–†–ê–í–ê–Ø –ß–ê–°–¢–¨ - 3D –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø (40% —à–∏—Ä–∏–Ω—ã) ===
            ColumnLayout {
                Layout.fillWidth: true
                Layout.fillHeight: true
                Layout.preferredWidth: parent.width * 0.4
                spacing: 10

                // 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≥–æ–ª–æ–≤—ã
                Rectangle {
                    Layout.fillWidth: true
                    Layout.fillHeight: true
                    color: "#252525"
                    radius: 8
                    border.color: "#444"
                    border.width: 1

                    Column {
                        anchors.fill: parent
                        anchors.margins: 15
                        spacing: 10

                        Text {
                            text: "3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª–æ–∂–µ–Ω–∏—è –≥–æ–ª–æ–≤—ã"
                            color: "white"
                            font.pixelSize: 16
                            font.bold: true
                            anchors.horizontalCenter: parent.horizontalCenter
                        }

                        // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è OpenGL 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
                        Rectangle {
                            id: visualizationContainer
                            width: parent.width
                            height: parent.height - 100
                            color: "#1a1a1a"
                            radius: 6
                            border.color: "#333"

                            // –ü—Ä–æ—Å—Ç–∞—è 3D-—Å–µ—Ç–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
                            Canvas {
                                anchors.fill: parent
                                anchors.margins: 20

                                onPaint: {
                                    var ctx = getContext("2d")
                                    ctx.clearRect(0, 0, width, height)

                                    // 3D —Å–µ—Ç–∫–∞
                                    ctx.strokeStyle = "#333"
                                    ctx.lineWidth = 1

                                    // –ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–µ –ª–∏–Ω–∏–∏
                                    for (var i = 0; i <= 4; i++) {
                                        var pos = i * width/4
                                        ctx.beginPath()
                                        ctx.moveTo(pos, 0)
                                        ctx.lineTo(width/2, height/2)
                                        ctx.stroke()

                                        ctx.beginPath()
                                        ctx.moveTo(pos, height)
                                        ctx.lineTo(width/2, height/2)
                                        ctx.stroke()
                                    }

                                    if (controller.headModel.hasData) {
                                        // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≥–æ–ª–æ–≤–∞ (–∫—É–± –≤ –∏–∑–æ–º–µ—Ç—Ä–∏–∏)
                                        ctx.strokeStyle = "#4CAF50"
                                        ctx.lineWidth = 2
                                        ctx.beginPath()
                                        // –ü–µ—Ä–µ–¥–Ω—è—è –≥—Ä–∞–Ω—å
                                        ctx.moveTo(width/2 - 40, height/2 - 30)
                                        ctx.lineTo(width/2 + 40, height/2 - 30)
                                        ctx.lineTo(width/2 + 40, height/2 + 50)
                                        ctx.lineTo(width/2 - 40, height/2 + 50)
                                        ctx.closePath()
                                        ctx.stroke()

                                        // –ó–∞–¥–Ω—è—è –≥—Ä–∞–Ω—å
                                        ctx.beginPath()
                                        ctx.moveTo(width/2 - 20, height/2 - 50)
                                        ctx.lineTo(width/2 + 60, height/2 - 50)
                                        ctx.lineTo(width/2 + 60, height/2 + 30)
                                        ctx.lineTo(width/2 - 20, height/2 + 30)
                                        ctx.closePath()
                                        ctx.stroke()

                                        // –°–æ–µ–¥–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
                                        ctx.beginPath()
                                        ctx.moveTo(width/2 - 40, height/2 - 30)
                                        ctx.lineTo(width/2 - 20, height/2 - 50)
                                        ctx.moveTo(width/2 + 40, height/2 - 30)
                                        ctx.lineTo(width/2 + 60, height/2 - 50)
                                        ctx.moveTo(width/2 + 40, height/2 + 50)
                                        ctx.lineTo(width/2 + 60, height/2 + 30)
                                        ctx.moveTo(width/2 - 40, height/2 + 50)
                                        ctx.lineTo(width/2 - 20, height/2 + 30)
                                        ctx.stroke()
                                    } else {
                                        // –¢–µ–∫—Å—Ç "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                                        ctx.fillStyle = "#666"
                                        ctx.font = "16px Arial"
                                        ctx.textAlign = "center"
                                        ctx.fillText("–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö", width/2, height/2)
                                    }
                                }
                            }
                        }

                        // –¢–µ–∫—Å—Ç —Å —É–≥–ª–∞–º–∏ –≤–Ω–∏–∑—É
                        Rectangle {
                            width: parent.width
                            height: 60
                            color: "#2d2d2d"
                            radius: 6

                            Column {
                                anchors.centerIn: parent
                                spacing: 5

                                Text {
                                    text: "–¢–µ–∫—É—â–∏–µ —É–≥–ª—ã:"
                                    color: "#aaa"
                                    font.pixelSize: 12
                                    anchors.horizontalCenter: parent.horizontalCenter
                                }

                                Text {
                                    text: controller.headModel.hasData ?
                                          "Pitch: " + controller.headModel.pitch.toFixed(1) + "¬∞ | " +
                                          "Roll: " + controller.headModel.roll.toFixed(1) + "¬∞ | " +
                                          "Yaw: " + controller.headModel.yaw.toFixed(1) + "¬∞" :
                                          "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                                    color: controller.headModel.hasData ? "white" : "#888"
                                    font.pixelSize: 14
                                    anchors.horizontalCenter: parent.horizontalCenter
                                }
                            }
                        }
                    }
                }

                // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –≥–æ–ª–æ–≤–æ–∫—Ä—É–∂–µ–Ω–∏—è
                Rectangle {
                    Layout.fillWidth: true
                    Layout.preferredHeight: 100
                    color: "#252525"
                    radius: 8
                    border.color: controller.headModel.dizziness ? "#f44336" : "#444"
                    border.width: controller.headModel.dizziness ? 3 : 1

                    Column {
                        anchors.centerIn: parent
                        spacing: 10

                        Text {
                            text: "–°–û–°–¢–û–Ø–ù–ò–ï –ü–ê–¶–ò–ï–ù–¢–ê"
                            color: "#aaa"
                            font.pixelSize: 14
                            anchors.horizontalCenter: parent.horizontalCenter
                        }

                        Rectangle {
                            width: 60
                            height: 60
                            radius: 30
                            color: controller.headModel.dizziness ? "#f44336" : "#4CAF50"
                            anchors.horizontalCenter: parent.horizontalCenter

                            Text {
                                text: controller.headModel.dizziness ? "üòµ" : "üòä"
                                font.pixelSize: 24
                                anchors.centerIn: parent
                            }
                        }

                        Text {
                            text: controller.headModel.dizziness ? "–ì–û–õ–û–í–û–ö–†–£–ñ–ï–ù–ò–ï" : "–ù–û–†–ú–ê"
                            color: controller.headModel.dizziness ? "#f44336" : "#4CAF50"
                            font.pixelSize: 16
                            font.bold: true
                            anchors.horizontalCenter: parent.horizontalCenter
                        }
                    }
                }
            }
        }

        // === –£–ü–†–ê–í–õ–ï–ù–ò–ï –õ–û–ì-–§–ê–ô–õ–û–ú ===
        Rectangle {
            Layout.fillWidth: true
            Layout.preferredHeight: 140
            color: controller.logControlsEnabled ? "#2d2d2d" : "#3d3d3d"
            radius: 8
            border.color: controller.logControlsEnabled ? "#555" : "#444"
            border.width: 1
            opacity: controller.logControlsEnabled ? 1.0 : 0.7

            ColumnLayout {
                anchors.fill: parent
                anchors.margins: 15
                spacing: 10

                Text {
                    text: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º –ª–æ–≥-—Ñ–∞–π–ª–∞"
                    color: controller.logControlsEnabled ? "white" : "#888"
                    font.pixelSize: 16
                    font.bold: true
                }

                // –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É
                RowLayout {
                    Layout.fillWidth: true
                    spacing: 10

                    TextField {
                        id: filePathField
                        Layout.fillWidth: true
                        placeholderText: "–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –ª–æ–≥-—Ñ–∞–π–ª—É"
                        selectByMouse: true
                        color: controller.logControlsEnabled ? "white" : "#888"
                        enabled: !controller.connected
                        background: Rectangle {
                            color: controller.logControlsEnabled ? "#3c3c3c" : "#2c2c2c"
                            radius: 4
                        }
                    }

                    Button {
                        text: "–ó–∞–≥—Ä—É–∑–∏—Ç—å"
                        onClicked: {
                            if (filePathField.text !== "") {
                                controller.loadLogFile(filePathField.text)
                            }
                        }
                        enabled: !controller.connected
                        background: Rectangle {
                            color: parent.down ? "#3a5c42" : (parent.enabled ? "#4caf50" : "#3a5c42")
                            radius: 4
                        }
                        contentItem: Text {
                            text: parent.text
                            color: "white"
                            horizontalAlignment: Text.AlignHCenter
                            verticalAlignment: Text.AlignVCenter
                        }
                    }
                }

                RowLayout {
                    Layout.fillWidth: true
                    spacing: 10

                    // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                    Button {
                        text: "‚èÆÔ∏è"
                        Layout.preferredWidth: 50
                        onClicked: controller.seekLog(0)
                        enabled: controller.logControlsEnabled
                        ToolTip.text: "–í –Ω–∞—á–∞–ª–æ"
                        background: Rectangle {
                            color: parent.down ? "#5a5a5a" : (parent.enabled ? "#3c3c3c" : "#2c2c2c")
                            radius: 4
                        }
                    }

                    Button {
                        text: "‚è™"
                        Layout.preferredWidth: 50
                        onClicked: controller.seekLog(Math.max(0, controller.currentTime - 10))
                        enabled: controller.logControlsEnabled
                        ToolTip.text: "–ù–∞–∑–∞–¥ –Ω–∞ 10—Å"
                        background: Rectangle {
                            color: parent.down ? "#5a5a5a" : (parent.enabled ? "#3c3c3c" : "#2c2c2c")
                            radius: 4
                        }
                    }

                    Button {
                        id: playPauseBtn
                        text: controller.logPlaying ? "‚è∏Ô∏è" : "‚ñ∂Ô∏è"
                        Layout.preferredWidth: 80
                        onClicked: controller.logPlaying ? controller.pauseLog() : controller.playLog()
                        enabled: controller.logControlsEnabled
                        ToolTip.text: controller.logPlaying ? "–ü–∞—É–∑–∞" : "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
                        background: Rectangle {
                            color: parent.down ? "#3a5c42" : (parent.enabled ? "#4caf50" : "#3a5c42")
                            radius: 4
                        }
                        contentItem: Text {
                            text: parent.text
                            color: "white"
                            font.pixelSize: 14
                            horizontalAlignment: Text.AlignHCenter
                            verticalAlignment: Text.AlignVCenter
                        }
                    }

                    Button {
                        text: "‚è©"
                        Layout.preferredWidth: 50
                        onClicked: controller.seekLog(Math.min(controller.totalTime, controller.currentTime + 10))
                        enabled: controller.logControlsEnabled
                        ToolTip.text: "–í–ø–µ—Ä–µ–¥ –Ω–∞ 10—Å"
                        background: Rectangle {
                            color: parent.down ? "#5a5a5a" : (parent.enabled ? "#3c3c3c" : "#2c2c2c")
                            radius: 4
                        }
                    }

                    Button {
                        text: "‚è≠Ô∏è"
                        Layout.preferredWidth: 50
                        onClicked: controller.seekLog(controller.totalTime)
                        enabled: controller.logControlsEnabled
                        ToolTip.text: "–í –∫–æ–Ω–µ—Ü"
                        background: Rectangle {
                            color: parent.down ? "#5a5a5a" : (parent.enabled ? "#3c3c3c" : "#2c2c2c")
                            radius: 4
                        }
                    }

                    Button {
                        text: "‚èπÔ∏è"
                        Layout.preferredWidth: 50
                        onClicked: controller.stopLog()
                        enabled: controller.logControlsEnabled
                        ToolTip.text: "–°—Ç–æ–ø"
                        background: Rectangle {
                            color: parent.down ? "#7c3a3a" : (parent.enabled ? "#f44336" : "#7c3a3a")
                            radius: 4
                        }
                    }

                    Item { Layout.fillWidth: true } // –†–∞—Å–ø–æ—Ä–∫–∞

                    Text {
                        text: {
                            var currentMinutes = Math.floor(controller.currentTime / 60)
                            var currentSeconds = Math.floor(controller.currentTime % 60)
                            var totalMinutes = Math.floor(controller.totalTime / 60)
                            var totalSeconds = Math.floor(controller.totalTime % 60)
                            return (currentMinutes < 10 ? "0" : "") + currentMinutes + ":" +
                                   (currentSeconds < 10 ? "0" : "") + currentSeconds + " / " +
                                   (totalMinutes < 10 ? "0" : "") + totalMinutes + ":" +
                                   (totalSeconds < 10 ? "0" : "") + totalSeconds
                        }
                        color: controller.logControlsEnabled ? "#ccc" : "#888"
                        font.pixelSize: 14
                    }
                }

                // –ü–æ–ª–∑—É–Ω–æ–∫ –≤—Ä–µ–º–µ–Ω–∏
                Slider {
                    Layout.fillWidth: true
                    from: 0
                    to: controller.totalTime
                    value: controller.currentTime
                    onMoved: controller.seekLog(value)
                    enabled: controller.logControlsEnabled && !controller.logPlaying
                    background: Rectangle {
                        color: controller.logControlsEnabled ? "#3c3c3c" : "#2c2c2c"
                        radius: 2
                        height: 4
                    }
                    handle: Rectangle {
                        width: 16
                        height: 16
                        radius: 8
                        color: controller.logControlsEnabled ? "#2196f3" : "#666"
                        border.color: controller.logControlsEnabled ? "#1976d2" : "#555"
                        border.width: 2
                    }
                }
            }
        }
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ C++
    Connections {
        target: controller
        function onNotificationChanged(message) {
            showNotification(message, false)
        }

        function onConnectedChanged(connected) {
            if (connected) {
                showNotification("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ " + controller.selectedPort, false)
            } else {
                showNotification("–û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç COM-–ø–æ—Ä—Ç–∞", false)
            }
        }

        function onLogLoadedChanged(loaded) {
            if (loaded) {
                showNotification("–õ–æ–≥-—Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω", false)
            }
        }

        function onLogModeChanged(logMode) {
            if (logMode) {
                showNotification("–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –≤ —Ä–µ–∂–∏–º –ª–æ–≥-—Ñ–∞–π–ª–∞", false)
            }
        }
    }

    // –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    Component.onCompleted: {
        timer.start()
    }

    Timer {
        id: timer
        interval: 1000
        onTriggered: {
            showNotification("–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ", false)
        }
    }

    // –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–±–æ–µ–≤ COM-–ø–æ—Ä—Ç–∞
    Connections {
        target: controller
        function onConnectedChanged(connected) {
            if (!connected) {
                // –ü—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –¥–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ—á–∏—Å—Ç–∫—É
                cleanupTimer.restart()
            }
        }
    }

    Timer {
        id: cleanupTimer
        interval: 100
        onTriggered: {
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if (controller && controller.headModel) {
                // –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º - –ø—Ä–æ—Å—Ç–æ –¥–∞–µ–º –≤—Ä–µ–º—è —Å–∏—Å—Ç–µ–º–µ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è
            }
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
    function handleCriticalError(message) {
        console.error("Critical error:", message)
        showNotification("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: " + message, true)
        // –ù–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
    }
}
